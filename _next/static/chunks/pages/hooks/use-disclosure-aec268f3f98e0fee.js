(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[65979],{43204:function(n,e,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-disclosure",function(){return o(8084)}])},8084:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return r}});var s=o(52322),l=o(45392),a=o(54078),c=o(15019);let d=(0,a.A)(c.us.useDisclosure);function i(n){let e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"use-disclosure"})," hook manages boolean state. It provides ",(0,s.jsx)(e.code,{children:"open"}),", ",(0,s.jsx)(e.code,{children:"close"})," and ",(0,s.jsx)(e.code,{children:"toggle"})," handlers\nand accepts optional ",(0,s.jsx)(e.code,{children:"onOpen"})," and ",(0,s.jsx)(e.code,{children:"onClose"})," callbacks. It can be used to manage controlled modals,\npopovers and other similar components:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { useDisclosure } from '@mantine/hooks';\n\nfunction Demo() {\n  const [opened, handlers] = useDisclosure(false);\n\n  // Sets opened to true\n  handlers.open();\n\n  // Sets opened to false\n  handlers.close();\n\n  // Sets opened to true if it was false and vice versa\n  handlers.toggle();\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"callbacks",children:"Callbacks"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"onOpen"})," and ",(0,s.jsx)(e.code,{children:"onClose"})," callbacks are called when opened state changes:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"import { useDisclosure } from '@mantine/hooks';\n\nfunction Demo() {\n  const [opened, handlers] = useDisclosure(false, {\n    onOpen: () => console.log('Opened'),\n    onClose: () => console.log('Closed'),\n  });\n\n  // Calls onOpen callback and sets opened to true\n  handlers.open();\n\n  // Does nothing, opened is already true\n  handlers.open();\n\n  // Calls onClose callback and sets opened to false\n  handlers.close();\n\n  // Does nothing, opened is already false\n  handlers.close();\n\n  // Calls onOpen or onClose depending on next state\n  handlers.toggle();\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"definition",children:"Definition"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-tsx",children:"function useDisclosure(\n  initialState: boolean,\n  callbacks?: {\n    onOpen?(): void;\n    onClose?(): void;\n  }\n): [\n  boolean,\n  {\n    open: () => void;\n    close: () => void;\n    toggle: () => void;\n  },\n];\n"})})]})}function r(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(d,{...n,children:(0,s.jsx)(i,{...n})})}}},function(n){n.O(0,[61177,66748,61639,92888,49774,40179],function(){return n(n.s=43204)}),_N_E=n.O()}]);