(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[70683],{86719:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/hooks/use-toggle",function(){return t(8003)}])},8003:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return h}});var o=t(52322),s=t(45392),l=t(39629),i=t(2784),a=t(75751);let r={type:"code",code:`
import { Button } from '@mantine/core';
import { useToggle } from '@mantine/hooks';

function Demo() {
  const [value, toggle] = useToggle(['blue', 'orange', 'cyan', 'teal']);

  return (
    <Button color={value} onClick={() => toggle()}>
      {value}
    </Button>
  );
}
`,component:function(){let[e,n]=function(e=[!1,!0]){let[[n],t]=(0,i.useReducer)((e,n)=>{let t=n instanceof Function?n(e[0]):n,o=Math.abs(e.indexOf(t));return e.slice(o).concat(e.slice(0,o))},e);return[n,t]}(["blue","orange","cyan","teal"]);return(0,o.jsx)(l.z,{color:e,onClick:()=>n(),children:(0,a.j)(e)})},centered:!0};var c=t(54078),u=t(15019);let g=(0,c.A)(u.us.useToggle);function d(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components},{Demo:t}=n;return t||function(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Demo",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"use-toggle"})," implements a common state pattern â€“ it switches state between given values:"]}),"\n",(0,o.jsx)(t,{data:r}),"\n",(0,o.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.p,{children:"The hook accepts an array as single argument, the first option will be used as the default value."}),"\n",(0,o.jsx)(n.p,{children:"The hook returns an array with state value and toggle function:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useToggle } from '@mantine/hooks';\n\nconst [value, toggle] = useToggle(['light', 'dark'] as const);\n\ntoggle(); // -> value == 'light'\ntoggle(); // -> value == 'dark'\n\n// You can force specific value, in this case state will be set to given value\ntoggle('dark'); // -> value == 'dark'\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you do not provide an array with options, then ",(0,o.jsx)(n.code,{children:"use-toggle"})," will use boolean values with ",(0,o.jsx)(n.code,{children:"false"})," as default:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useToggle } from '@mantine/hooks';\n\nconst [value, toggle] = useToggle();\n// -> value === false\ntoggle(); // -> value === true\n"})}),"\n",(0,o.jsx)(n.h2,{id:"set-type",children:"Set type"}),"\n",(0,o.jsx)(n.p,{children:"By default, TypeScript will guess your type, but in most cases it's better to use const assertion to prevent type widening:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useToggle } from '@mantine/hooks';\n\nuseToggle(['light', 'dark']); // value is string\nuseToggle(['light', 'dark'] as const); // value is 'dark' | 'light'\nuseToggle<'dark' | 'light'>(['light', 'dark']); // same as above\n"})}),"\n",(0,o.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"function useToggle<T = boolean>(\n  options?: readonly T[]\n): readonly [T, (value?: React.SetStateAction<T>) => void];\n"})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(g,{...e,children:(0,o.jsx)(d,{...e})})}}},function(e){e.O(0,[61177,66748,61639,92888,49774,40179],function(){return e(e.s=86719)}),_N_E=e.O()}]);