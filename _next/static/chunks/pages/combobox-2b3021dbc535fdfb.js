(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[72893],{73328:function(o,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/combobox",function(){return e(68682)}])},39013:function(o,n,e){"use strict";e.d(n,{y:function(){return i}});var t=e(52322),r=e(97729),l=e.n(r);function i(o){let{title:n,description:e}=o,r=n?"".concat(n," | Mantine"):"Mantine",i=e||"React components and hooks library with native dark theme support and focus on usability, accessibility and developer experience";return(0,t.jsxs)(l(),{children:[(0,t.jsx)("title",{children:r}),(0,t.jsx)("meta",{property:"description",name:"description",content:i}),(0,t.jsx)("meta",{property:"og:title",name:"og:title",content:r}),(0,t.jsx)("meta",{property:"og:description",name:"og:description",content:i}),(0,t.jsx)("meta",{property:"twitter:title",name:"twitter:title",content:r}),(0,t.jsx)("meta",{property:"twitter:description",name:"twitter:description",content:i})]})}},68682:function(o,n,e){"use strict";e.r(n),e.d(n,{default:function(){return nR}});let t=[{id:"BasicSelect",name:"Basic select",description:"Primitive select component",type:"select"},{id:"SelectActive",name:"Select with active option",description:"Active option is marked in the dropdown",type:"select"},{id:"SearchableSelect",name:"Searchable select",description:"Select with search",type:"select"},{id:"SelectLimit",name:"Select with options limit",description:"100 000 options searchable select",fullDescription:"Limiting the number of options rendered at a time is the most efficient way to deal with large data sets. The example below shows how to use the limit prop to only render 7 options at a time while performing a search in a data set of 100,000 options.",type:"select"},{id:"SelectOptionComponent",name:"Select with custom option",description:"Select with custom option and value component",type:"select"},{id:"SelectAsync",name:"Select with async data",description:"Data is requested only when the dropdown is opened",type:"select"},{id:"SelectClearable",name:"Select with clear button",description:"Clearable select",type:"select"},{id:"SelectDropdownSearch",name:"Select with search in dropdown",description:"Select with search input in the dropdown",type:"select"},{id:"SelectOptionOnHover",name:"Select option on hover",description:"Move selection to hovered option",fullDescription:"Moving selection to hovered option can be useful when you want to combine mouse and keyboard interactions.",type:"select"},{id:"SelectGroups",name:"Options groups",description:"Select with options groups",type:"select"},{id:"SelectGroupsSearchable",name:"Searchable select with groups",description:"Options filtering with grouped data",type:"select"},{id:"SelectGroupsStyles",name:"Custom group styles",description:"Customize groups styles with Styles API",type:"select"},{id:"SelectCreatable",name:"Creatable select",description:"Select with option to create new options",type:"select"},{id:"BasicAutocomplete",name:"Basic autocomplete",description:"Primitive autocomplete component",type:"autocomplete"},{id:"AutocompleteLimit",name:"Autocomplete with options limit",description:"100 000 options search",fullDescription:"Limiting the number of options rendered at a time is the most efficient way to deal with large data sets. The example below shows how to use the limit prop to only render 7 options at a time while performing a search in a data set of 100,000 options.",type:"autocomplete"},{id:"AsyncAutocomplete",name:"Async autocomplete",description:"Autocomplete with async data",type:"autocomplete"},{id:"AutocompleteHighlight",name:"Autocomplete with highlight",description:"Autocomplete with highlighted search query in options",type:"autocomplete"},{id:"AutocompleteSelectFirstOption",name:"Select first option on type",description:"Autocomplete with first option selected when user types",type:"autocomplete"},{id:"AutocompleteDynamic",name:"Dynamic options",description:"Autocomplete with options that depend on the user input",type:"autocomplete"},{id:"AutocompleteClearable",name:"Clearable autocomplete",description:"Autocomplete with clear button",type:"autocomplete"},{id:"BasicButton",name:"Basic button",description:"Primitive combobox with button target",type:"button"},{id:"ButtonSearch",name:"Button with search in dropdown",description:"Button with search input in the dropdown",type:"button"},{id:"ButtonMultiSelect",name:"Button multi select",description:"Button with multiple items selection",type:"button"},{id:"DropdownScroll",name:"Dropdown scroll",description:"Dropdown with native scrollbars",type:"dropdown"},{id:"DropdownScrollArea",name:"Dropdown with ScrollArea",description:"Dropdown with ScrollArea.Autosize scrollbars",type:"dropdown"},{id:"DropdownHeader",name:"Dropdown with header",description:"Dropdown with ScrollArea and header",type:"dropdown"},{id:"DropdownFooter",name:"Dropdown with footer",description:"Dropdown with ScrollArea and footer",type:"dropdown"},{id:"DropdownPositionStyles",name:"Dropdown with custom styles",description:"Change dropdown styles with Styles API",type:"dropdown"},{id:"SelectedStyles",name:"Custom selected styles",description:"Customize selected option styles",type:"dropdown"},{id:"DropdownAnimation",name:"Dropdown animation",description:"Dropdown with open/close animation",type:"animations"},{id:"DropdownOptionsAnimation",name:"Dropdown with option animation",description:"Play options animation on dropdown open",type:"animations"},{id:"SelectedAnimation",name:"Animate selected option",description:"Play options animation on when option is selected",type:"animations"},{id:"DropdownSmoothScroll",name:"Smooth scroll",description:"Smooth scroll of the options with keyboard navigation",type:"animations"},{id:"BasicMultiSelect",name:"Basic multiselect",description:"Primitive multiselect component",type:"multiselect"},{id:"SearchableMultiSelect",name:"Searchable multiselect",description:"Multiselect with search",type:"multiselect"},{id:"MaxSelectedItems",name:"Max selected options",description:"Limit max number of options that can be selected",type:"multiselect"},{id:"MultiSelectCheckbox",name:"Multiselect with checkboxes",description:"Multiselect options with checkboxes",type:"multiselect"},{id:"ActiveOptionsFilter",name:"Hide active options",description:"Remove active options from the dropdown",type:"multiselect"},{id:"MaxDisplayedItems",name:"Max displayed values",description:"Limit max number of values that can be displayed",type:"multiselect"},{id:"MultiSelectValueRenderer",name:"Custom value pills",description:"Use a custom component to render selected values",type:"multiselect"},{id:"MultiSelectCreatable",name:"Creatable multiselect",description:"Multiselect with option to create new options",type:"multiselect"},{id:"SelectList",name:"Inline options list",description:"Inline list with checkboxes",type:"other"},{id:"TransferList",name:"Transfer list",description:"Transfer list with search",type:"other"}];var r=e(52322),l=e(2784),i=e(56237),s=e(45855),a=e(61324),c=e(92258),u=e(89420);let p=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var m=JSON.parse("[{\"fileName\":\"ActiveOptionsFilter.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, Input, Pill, PillsInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83C\uDF6B Chocolate'];\\n\\nexport function ActiveOptionsFilter() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\\n  });\\n\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value.map((item) => (\\n    <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\\n      {item}\\n    </Pill>\\n  ));\\n\\n  const options = groceries\\n    .filter((item) => !value.includes(item))\\n    .map((item) => (\\n      <Combobox.Option value={item} key={item} active={value.includes(item)}>\\n        {item}\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput pointer onClick={() => combobox.toggleDropdown()}>\\n          <Pill.Group>\\n            {values.length > 0 ? (\\n              values\\n            ) : (\\n              <Input.Placeholder>Pick one or more values</Input.Placeholder>\\n            )}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                type=\\\"hidden\\\"\\n                onBlur={() => combobox.closeDropdown()}\\n                onKeyDown={(event) => {\\n                  if (event.key === 'Backspace') {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>All options selected</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),d=e(74770),b=e(12491);let h=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var x=JSON.parse("[{\"fileName\":\"AsyncAutocomplete.tsx\",\"language\":\"tsx\",\"code\":\"import { useRef, useState } from 'react';\\nimport { Combobox, Loader, TextInput, useCombobox } from '@mantine/core';\\n\\nconst MOCKDATA = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nfunction getAsyncData(searchQuery: string, signal: AbortSignal) {\\n  return new Promise<string[]>((resolve, reject) => {\\n    signal.addEventListener('abort', () => {\\n      reject(new Error('Request aborted'));\\n    });\\n\\n    setTimeout(() => {\\n      resolve(\\n        MOCKDATA.filter((item) => item.toLowerCase().includes(searchQuery.toLowerCase())).slice(\\n          0,\\n          5\\n        )\\n      );\\n    }, Math.random() * 1000);\\n  });\\n}\\n\\nexport function AsyncAutocomplete() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [loading, setLoading] = useState(false);\\n  const [data, setData] = useState<string[] | null>(null);\\n  const [value, setValue] = useState('');\\n  const [empty, setEmpty] = useState(false);\\n  const abortController = useRef<AbortController>();\\n\\n  const fetchOptions = (query: string) => {\\n    abortController.current?.abort();\\n    abortController.current = new AbortController();\\n    setLoading(true);\\n\\n    getAsyncData(query, abortController.current.signal)\\n      .then((result) => {\\n        setData(result);\\n        setLoading(false);\\n        setEmpty(result.length === 0);\\n        abortController.current = undefined;\\n      })\\n      .catch(() => {});\\n  };\\n\\n  const options = (data || []).map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      withinPortal={false}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Search groceries\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            fetchOptions(event.currentTarget.value);\\n            combobox.resetSelectedOption();\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => {\\n            combobox.openDropdown();\\n            if (data === null) {\\n              fetchOptions(value);\\n            }\\n          }}\\n          onBlur={() => combobox.closeDropdown()}\\n          rightSection={loading && <Loader size={18} />}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown hidden={data === null}>\\n        <Combobox.Options>\\n          {options}\\n          {empty && <Combobox.Empty>No results found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),C=e(2670);let D=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var v=JSON.parse("[{\"fileName\":\"AutocompleteClearable.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CloseButton, Combobox, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function AutocompleteClearable() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n          rightSection={\\n            value !== '' && (\\n              <CloseButton\\n                size=\\\"sm\\\"\\n                onMouseDown={(event) => event.preventDefault()}\\n                onClick={() => setValue('')}\\n                aria-label=\\\"Clear value\\\"\\n              />\\n            )\\n          }\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),g=JSON.parse('[{"fileName":"AutocompleteDynamic.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, TextInput, useCombobox } from \'@mantine/core\';\\n\\nexport function AutocompleteDynamic() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState(\'\');\\n\\n  const options = [\'gmail.com\', \'outlook.com\', \'mantine.dev\'].map((item) => (\\n    <Combobox.Option value={`${value}@${item}`} key={item}>\\n      {`${value}@${item}`}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\"Your email\\"\\n          placeholder=\\"Your email\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown hidden={value.trim().length === 0 || value.includes(\'@\')}>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),w=e(52286);let S=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var f=JSON.parse("[{\"fileName\":\"AutocompleteHighlight.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, Highlight, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function AutocompleteHighlight() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      <Highlight highlight={value} size=\\\"sm\\\">\\n        {item}\\n      </Highlight>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      withinPortal={false}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.updateSelectedOptionIndex();\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let O=Array(1e5).fill(0).map((o,n)=>"Item ".concat(n));var y=JSON.parse('[{"fileName":"AutocompleteLimit.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, TextInput, useCombobox } from \'@mantine/core\';\\n\\nconst MOCKDATA = Array(100000)\\n  .fill(0)\\n  .map((_, index) => `Item ${index}`);\\n\\nfunction getFilteredOptions(data: string[], searchQuery: string, limit: number) {\\n  const result: string[] = [];\\n\\n  for (let i = 0; i < data.length; i += 1) {\\n    if (result.length === limit) {\\n      break;\\n    }\\n\\n    if (data[i].toLowerCase().includes(searchQuery.trim().toLowerCase())) {\\n      result.push(data[i]);\\n    }\\n  }\\n\\n  return result;\\n}\\n\\nexport function AutocompleteLimit() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState(\'\');\\n  const filteredOptions = getFilteredOptions(MOCKDATA, value, 7);\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      withinPortal={false}\\n      store={combobox}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\"Pick value or type anything\\"\\n          placeholder=\\"Pick value or type anything\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]');let j=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var P=JSON.parse("[{\"fileName\":\"AutocompleteSelectFirstOption.tsx\",\"language\":\"tsx\",\"code\":\"import { useEffect, useState } from 'react';\\nimport { Combobox, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function AutocompleteSelectFirstOption() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  useEffect(() => {\\n    // we need to wait for options to render before we can select first one\\n    combobox.selectFirstOption();\\n  }, [value]);\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let B=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var k=JSON.parse("[{\"fileName\":\"BasicAutocomplete.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function BasicAutocomplete() {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),F=e(39629),E=e(28559),I=e(8582);let T=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var z=JSON.parse('[{"fileName":"BasicButton.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Box, Button, Combobox, Text, useCombobox } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function BasicButton() {\\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <>\\n      <Combobox\\n        store={combobox}\\n        width={250}\\n        position=\\"bottom-start\\"\\n        withArrow\\n        withinPortal={false}\\n        onOptionSubmit={(val) => {\\n          setSelectedItem(val);\\n          combobox.closeDropdown();\\n        }}\\n      >\\n        <Combobox.Target>\\n          <Button onClick={() => combobox.toggleDropdown()}>Pick item</Button>\\n        </Combobox.Target>\\n\\n        <Combobox.Dropdown>\\n          <Combobox.Options>{options}</Combobox.Options>\\n        </Combobox.Dropdown>\\n      </Combobox>\\n\\n      <Box mt=\\"xs\\">\\n        <Text span size=\\"sm\\" c=\\"dimmed\\">\\n          Selected item:{\' \'}\\n        </Text>\\n\\n        <Text span size=\\"sm\\">\\n          {selectedItem || \'Nothing selected\'}\\n        </Text>\\n      </Box>\\n    </>\\n  );\\n}\\n"}]'),A=e(93010),N=e(40284);let L=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var V=JSON.parse("[{\"fileName\":\"BasicMultiSelect.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CheckIcon, Combobox, Group, Input, Pill, PillsInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83C\uDF6B Chocolate'];\\n\\nexport function BasicMultiSelect() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\\n  });\\n\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value.map((item) => (\\n    <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\\n      {item}\\n    </Pill>\\n  ));\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item} active={value.includes(item)}>\\n      <Group gap=\\\"sm\\\">\\n        {value.includes(item) ? <CheckIcon size={12} /> : null}\\n        <span>{item}</span>\\n      </Group>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput pointer onClick={() => combobox.toggleDropdown()}>\\n          <Pill.Group>\\n            {values.length > 0 ? (\\n              values\\n            ) : (\\n              <Input.Placeholder>Pick one or more values</Input.Placeholder>\\n            )}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                type=\\\"hidden\\\"\\n                onBlur={() => combobox.closeDropdown()}\\n                onKeyDown={(event) => {\\n                  if (event.key === 'Backspace') {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),M=e(73063);let _=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var G=JSON.parse('[{"fileName":"BasicSelect.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function BasicSelect() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]');let H=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var R=JSON.parse("[{\"fileName\":\"ButtonMultiSelect.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Box, Button, CheckIcon, Combobox, Group, Text, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function ButtonMultiSelect() {\\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\\n\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      <Group>\\n        {selectedItems.includes(item) && <CheckIcon size={12} />}\\n        <span>{item}</span>\\n      </Group>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <>\\n      <Box mb=\\\"xs\\\">\\n        <Text span size=\\\"sm\\\" c=\\\"dimmed\\\">\\n          Selected item:{' '}\\n        </Text>\\n\\n        <Text span size=\\\"sm\\\">\\n          {selectedItems.length > 0 ? selectedItems.join(', ') : 'Nothing selected'}\\n        </Text>\\n      </Box>\\n\\n      <Combobox\\n        store={combobox}\\n        width={250}\\n        position=\\\"bottom-start\\\"\\n        withArrow\\n        withinPortal={false}\\n        positionDependencies={[selectedItems]}\\n        onOptionSubmit={(val) => {\\n          setSelectedItems((current) =>\\n            current.includes(val) ? current.filter((item) => item !== val) : [...current, val]\\n          );\\n        }}\\n      >\\n        <Combobox.Target>\\n          <Button onClick={() => combobox.toggleDropdown()}>Pick item</Button>\\n        </Combobox.Target>\\n\\n        <Combobox.Dropdown>\\n          <Combobox.Options>{options}</Combobox.Options>\\n        </Combobox.Dropdown>\\n      </Combobox>\\n    </>\\n  );\\n}\\n\"}]");let K=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var J=JSON.parse("[{\"fileName\":\"ButtonSearch.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Box, Button, Combobox, Text, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function ButtonSearch() {\\n  const [search, setSearch] = useState('');\\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\\n  const combobox = useCombobox({\\n    onDropdownClose: () => {\\n      combobox.resetSelectedOption();\\n      combobox.focusTarget();\\n      setSearch('');\\n    },\\n\\n    onDropdownOpen: () => {\\n      combobox.focusSearchInput();\\n    },\\n  });\\n\\n  const options = groceries\\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    .map((item) => (\\n      <Combobox.Option value={item} key={item}>\\n        {item}\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <>\\n      <Combobox\\n        store={combobox}\\n        width={250}\\n        position=\\\"bottom-start\\\"\\n        withArrow\\n        withinPortal={false}\\n        onOptionSubmit={(val) => {\\n          setSelectedItem(val);\\n          combobox.closeDropdown();\\n        }}\\n      >\\n        <Combobox.Target withAriaAttributes={false}>\\n          <Button onClick={() => combobox.toggleDropdown()}>Pick item</Button>\\n        </Combobox.Target>\\n\\n        <Combobox.Dropdown>\\n          <Combobox.Search\\n            value={search}\\n            onChange={(event) => setSearch(event.currentTarget.value)}\\n            placeholder=\\\"Search groceries\\\"\\n          />\\n          <Combobox.Options>\\n            {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n          </Combobox.Options>\\n        </Combobox.Dropdown>\\n      </Combobox>\\n\\n      <Box mt=\\\"xs\\\">\\n        <Text span size=\\\"sm\\\" c=\\\"dimmed\\\">\\n          Selected item:{' '}\\n        </Text>\\n\\n        <Text span size=\\\"sm\\\">\\n          {selectedItem || 'Nothing selected'}\\n        </Text>\\n      </Box>\\n    </>\\n  );\\n}\\n\"}]"),Z=JSON.parse("[{\"fileName\":\"DropdownAnimation.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, Input, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function DropdownAnimation() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      transitionProps={{ duration: 200, transition: 'pop' }}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          type=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\\"none\\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let U=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var Y=JSON.parse("[{\"fileName\":\"DropdownFooter.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Anchor, Combobox, ScrollArea, Text, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownFooter() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <ScrollArea.Autosize mah={200} type=\\\"scroll\\\">\\n            {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n          </ScrollArea.Autosize>\\n        </Combobox.Options>\\n        <Combobox.Footer>\\n          <Text fz=\\\"xs\\\" c=\\\"dimmed\\\">\\n            Search powered by{' '}\\n            <Anchor fz=\\\"xs\\\" href=\\\"https://mantine.dev\\\" target=\\\"_blank\\\">\\n              Mantine\\n            </Anchor>\\n          </Text>\\n        </Combobox.Footer>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),q=e(20135),X=e(71873);let $=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var Q=JSON.parse("[{\"fileName\":\"DropdownHeader.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, ScrollArea, Text, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownHeader() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item} disabled={item === '\uD83E\uDD55 Carrots'}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <Combobox.Header>\\n            <Text fz=\\\"xs\\\">Note: Carrots are not currently available</Text>\\n          </Combobox.Header>\\n          <ScrollArea.Autosize mah={200} type=\\\"scroll\\\">\\n            {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n          </ScrollArea.Autosize>\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let W=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var oo=JSON.parse('[{"fileName":"DropdownOptionsAnimation.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport cx from \'clsx\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\nimport classes from \'./DropdownOptionsAnimation.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function DropdownOptionsAnimation() {\\n  const [animating, setAnimating] = useState(false);\\n\\n  const combobox = useCombobox({\\n    onDropdownClose: () => {\\n      combobox.resetSelectedOption();\\n      setAnimating(false);\\n    },\\n\\n    onDropdownOpen: () => setAnimating(true),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item, index) => (\\n    <Combobox.Option\\n      value={item}\\n      key={item}\\n      className={cx({ [classes.animateOption]: animating })}\\n      style={{ animationDelay: `${index * 30}ms` }}\\n    >\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"DropdownOptionsAnimation.module.css","language":"css","code":"@keyframes option-animation {\\n  from {\\n    opacity: 0;\\n    transform: translateX(rem(-20px));\\n  }\\n\\n  to {\\n    opacity: 1;\\n    transform: translateX(0);\\n  }\\n}\\n\\n.animateOption {\\n  opacity: 0;\\n  animation: option-animation 200ms ease;\\n  animation-fill-mode: forwards;\\n}\\n"}]'),on=e(40489),oe=e(55216),ot=e.n(oe);let or=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var ol=JSON.parse('[{"fileName":"DropdownPositionStyles.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\nimport classes from \'./DropdownPositionStyles.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function DropdownPositionStyles() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      offset={0}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n          classNames={{ input: classes.input }}\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown className={classes.dropdown}>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"DropdownPositionStyles.module.css","language":"css","code":".dropdown {\\n  border-top: 0;\\n  border-top-right-radius: 0;\\n  border-top-left-radius: 0;\\n  border-color: light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-4));\\n}\\n\\n.input {\\n  &[data-expanded] {\\n    border-bottom-right-radius: 0;\\n    border-bottom-left-radius: 0;\\n  }\\n}\\n"}]'),oi=e(2118),os=e.n(oi);let oa=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oc=JSON.parse("[{\"fileName\":\"DropdownScroll.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownScroll() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options mah={200} style={{ overflowY: 'auto' }}>\\n          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let ou=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var op=JSON.parse("[{\"fileName\":\"DropdownScrollArea.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, ScrollArea, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownScrollArea() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <ScrollArea.Autosize mah={200} type=\\\"scroll\\\">\\n            {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n          </ScrollArea.Autosize>\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let om=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var od=JSON.parse("[{\"fileName\":\"DropdownSmoothScroll.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, ScrollArea, TextInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n  '\uD83C\uDF4B Lemon',\\n  '\uD83E\uDD6C Lettuce',\\n  '\uD83C\uDF44 Mushrooms',\\n  '\uD83C\uDF4A Oranges',\\n  '\uD83E\uDD54 Potatoes',\\n  '\uD83C\uDF45 Tomatoes',\\n  '\uD83E\uDD5A Eggs',\\n  '\uD83E\uDD5B Milk',\\n  '\uD83C\uDF5E Bread',\\n  '\uD83C\uDF57 Chicken',\\n  '\uD83C\uDF54 Hamburger',\\n  '\uD83E\uDDC0 Cheese',\\n  '\uD83E\uDD69 Steak',\\n  '\uD83C\uDF5F French Fries',\\n  '\uD83C\uDF55 Pizza',\\n  '\uD83E\uDD66 Cauliflower',\\n  '\uD83E\uDD5C Peanuts',\\n  '\uD83C\uDF66 Ice Cream',\\n  '\uD83C\uDF6F Honey',\\n  '\uD83E\uDD56 Baguette',\\n  '\uD83C\uDF63 Sushi',\\n  '\uD83E\uDD5D Kiwi',\\n  '\uD83C\uDF53 Strawberries',\\n];\\n\\nexport function DropdownSmoothScroll() {\\n  const combobox = useCombobox({\\n    scrollBehavior: 'smooth',\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState('');\\n  const shouldFilterOptions = !groceries.some((item) => item === value);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      onOptionSubmit={(optionValue) => {\\n        setValue(optionValue);\\n        combobox.closeDropdown();\\n      }}\\n      store={combobox}\\n      withinPortal={false}\\n    >\\n      <Combobox.Target>\\n        <TextInput\\n          label=\\\"Pick value or type anything\\\"\\n          placeholder=\\\"Pick value or type anything\\\"\\n          value={value}\\n          onChange={(event) => {\\n            setValue(event.currentTarget.value);\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => combobox.closeDropdown()}\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <ScrollArea.Autosize mah={200} type=\\\"scroll\\\">\\n            {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}\\n          </ScrollArea.Autosize>\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let ob=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes","\uD83C\uDF4B Lemon","\uD83E\uDD6C Lettuce","\uD83C\uDF44 Mushrooms","\uD83C\uDF4A Oranges","\uD83E\uDD54 Potatoes","\uD83C\uDF45 Tomatoes","\uD83E\uDD5A Eggs","\uD83E\uDD5B Milk","\uD83C\uDF5E Bread","\uD83C\uDF57 Chicken","\uD83C\uDF54 Hamburger","\uD83E\uDDC0 Cheese","\uD83E\uDD69 Steak","\uD83C\uDF5F French Fries","\uD83C\uDF55 Pizza","\uD83E\uDD66 Cauliflower","\uD83E\uDD5C Peanuts","\uD83C\uDF66 Ice Cream","\uD83C\uDF6F Honey","\uD83E\uDD56 Baguette","\uD83C\uDF63 Sushi","\uD83E\uDD5D Kiwi","\uD83C\uDF53 Strawberries"];var oh=JSON.parse("[{\"fileName\":\"MaxDisplayedItems.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CheckIcon, Combobox, Group, Input, Pill, PillsInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83C\uDF6B Chocolate'];\\n\\nconst MAX_DISPLAYED_VALUES = 2;\\n\\nexport function MaxDisplayedItems() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\\n  });\\n\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value\\n    .slice(\\n      0,\\n      MAX_DISPLAYED_VALUES === value.length ? MAX_DISPLAYED_VALUES : MAX_DISPLAYED_VALUES - 1\\n    )\\n    .map((item) => (\\n      <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\\n        {item}\\n      </Pill>\\n    ));\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item} active={value.includes(item)}>\\n      <Group gap=\\\"sm\\\">\\n        {value.includes(item) ? <CheckIcon size={12} /> : null}\\n        <span>{item}</span>\\n      </Group>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput pointer onClick={() => combobox.toggleDropdown()}>\\n          <Pill.Group>\\n            {value.length > 0 ? (\\n              <>\\n                {values}\\n                {value.length > MAX_DISPLAYED_VALUES && (\\n                  <Pill>+{value.length - (MAX_DISPLAYED_VALUES - 1)} more</Pill>\\n                )}\\n              </>\\n            ) : (\\n              <Input.Placeholder>Pick one or more values</Input.Placeholder>\\n            )}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                type=\\\"hidden\\\"\\n                onBlur={() => combobox.closeDropdown()}\\n                onKeyDown={(event) => {\\n                  if (event.key === 'Backspace') {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let ox=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var oC=JSON.parse("[{\"fileName\":\"MaxSelectedItems.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CheckIcon, Combobox, Group, Input, Pill, PillsInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83C\uDF6B Chocolate'];\\n\\nconst ITEMS_LIMIT = 2;\\n\\nexport function MaxSelectedItems() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\\n  });\\n\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value.map((item) => (\\n    <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\\n      {item}\\n    </Pill>\\n  ));\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option\\n      value={item}\\n      key={item}\\n      active={value.includes(item)}\\n      disabled={value.length >= ITEMS_LIMIT && !value.includes(item)}\\n    >\\n      <Group gap=\\\"sm\\\">\\n        {value.includes(item) ? <CheckIcon size={12} /> : null}\\n        <span>{item}</span>\\n      </Group>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput pointer onClick={() => combobox.toggleDropdown()}>\\n          <Pill.Group>\\n            {values.length > 0 ? (\\n              values\\n            ) : (\\n              <Input.Placeholder>Pick one or more values</Input.Placeholder>\\n            )}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                type=\\\"hidden\\\"\\n                onBlur={() => combobox.closeDropdown()}\\n                onKeyDown={(event) => {\\n                  if (event.key === 'Backspace') {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Header>\\n          You can select up to 2 items, currently selected: {value.length}\\n        </Combobox.Header>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let oD=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var ov=JSON.parse("[{\"fileName\":\"MultiSelectCheckbox.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Checkbox, Combobox, Group, Input, Pill, PillsInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83C\uDF6B Chocolate'];\\n\\nexport function MultiSelectCheckbox() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\\n  });\\n\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value.map((item) => (\\n    <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\\n      {item}\\n    </Pill>\\n  ));\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item} active={value.includes(item)}>\\n      <Group gap=\\\"sm\\\">\\n        <Checkbox\\n          checked={value.includes(item)}\\n          onChange={() => {}}\\n          aria-hidden\\n          tabIndex={-1}\\n          style={{ pointerEvents: 'none' }}\\n        />\\n        <span>{item}</span>\\n      </Group>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput pointer onClick={() => combobox.toggleDropdown()}>\\n          <Pill.Group>\\n            {values.length > 0 ? (\\n              values\\n            ) : (\\n              <Input.Placeholder>Pick one or more values</Input.Placeholder>\\n            )}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                type=\\\"hidden\\\"\\n                onBlur={() => combobox.closeDropdown()}\\n                onKeyDown={(event) => {\\n                  if (event.key === 'Backspace') {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]"),og=e(95047);let ow=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var oS=JSON.parse("[{\"fileName\":\"MultiSelectCreatable.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CheckIcon, Combobox, Group, Pill, PillsInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83C\uDF6B Chocolate'];\\n\\nexport function MultiSelectCreatable() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\\n  });\\n\\n  const [search, setSearch] = useState('');\\n  const [data, setData] = useState(groceries);\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const exactOptionMatch = data.some((item) => item === search);\\n\\n  const handleValueSelect = (val: string) => {\\n    setSearch('');\\n\\n    if (val === '$create') {\\n      setData((current) => [...current, search]);\\n      setValue((current) => [...current, search]);\\n    } else {\\n      setValue((current) =>\\n        current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n      );\\n    }\\n  };\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value.map((item) => (\\n    <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\\n      {item}\\n    </Pill>\\n  ));\\n\\n  const options = data\\n    .filter((item) => item.toLowerCase().includes(search.trim().toLowerCase()))\\n    .map((item) => (\\n      <Combobox.Option value={item} key={item} active={value.includes(item)}>\\n        <Group gap=\\\"sm\\\">\\n          {value.includes(item) ? <CheckIcon size={12} /> : null}\\n          <span>{item}</span>\\n        </Group>\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput onClick={() => combobox.openDropdown()}>\\n          <Pill.Group>\\n            {values}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                onFocus={() => combobox.openDropdown()}\\n                onBlur={() => combobox.closeDropdown()}\\n                value={search}\\n                placeholder=\\\"Search values\\\"\\n                onChange={(event) => {\\n                  combobox.updateSelectedOptionIndex();\\n                  setSearch(event.currentTarget.value);\\n                }}\\n                onKeyDown={(event) => {\\n                  if (event.key === 'Backspace' && search.length === 0) {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options}\\n\\n          {!exactOptionMatch && search.trim().length > 0 && (\\n            <Combobox.Option value=\\\"$create\\\">+ Create {search}</Combobox.Option>\\n          )}\\n\\n          {exactOptionMatch && search.trim().length > 0 && options.length === 0 && (\\n            <Combobox.Empty>Nothing found</Combobox.Empty>\\n          )}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let of=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var oO=JSON.parse('[{"fileName":"MultiSelectValueRenderer.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { CheckIcon, Combobox, Group, Input, Pill, PillsInput, useCombobox } from \'@mantine/core\';\\nimport { countriesData, flags } from \'./countries-data\';\\nimport { CountryPill } from \'./CountryPill\';\\n\\nexport function MultiSelectValueRenderer() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex(\'active\'),\\n  });\\n\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value.map((item) => (\\n    <CountryPill key={item} value={item} onRemove={() => handleValueRemove(item)}>\\n      {item}\\n    </CountryPill>\\n  ));\\n\\n  const options = countriesData.map((item) => {\\n    const OptionFlag = flags[item.value];\\n    return (\\n      <Combobox.Option value={item.value} key={item.value} active={value.includes(item.value)}>\\n        <Group gap=\\"sm\\">\\n          {value.includes(item.value) ? <CheckIcon size={12} /> : null}\\n          <Group gap={7}>\\n            <OptionFlag />\\n            <span>{item.label}</span>\\n          </Group>\\n        </Group>\\n      </Combobox.Option>\\n    );\\n  });\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput pointer onClick={() => combobox.toggleDropdown()}>\\n          <Pill.Group>\\n            {values.length > 0 ? (\\n              values\\n            ) : (\\n              <Input.Placeholder>Pick one or more values</Input.Placeholder>\\n            )}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                type=\\"hidden\\"\\n                onBlur={() => combobox.closeDropdown()}\\n                onKeyDown={(event) => {\\n                  if (event.key === \'Backspace\') {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"CountryPill.module.css","language":"css","code":".pill {\\n  display: flex;\\n  align-items: center;\\n  cursor: default;\\n  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-7));\\n  border: rem(1px) solid light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-7));\\n  padding-left: var(--mantine-spacing-xs);\\n  border-radius: var(--mantine-radius-xl);\\n}\\n\\n.label {\\n  line-height: 1;\\n  font-size: var(--mantine-font-size-xs);\\n}\\n\\n.flag {\\n  margin-right: var(--mantine-spacing-xs);\\n}\\n"},{"fileName":"CountryPill.tsx","language":"tsx","code":"import { CloseButton } from \'@mantine/core\';\\nimport { countriesData, flags } from \'./countries-data\';\\nimport classes from \'./CountryPill.module.css\';\\n\\ninterface CountryPillProps extends React.ComponentPropsWithoutRef<\'div\'> {\\n  value: string;\\n  onRemove?: () => void;\\n}\\n\\nexport function CountryPill({ value, onRemove, ...others }: CountryPillProps) {\\n  const OptionFlag = flags[value];\\n  const country = countriesData.find((item) => item.value === value);\\n\\n  return (\\n    <div className={classes.pill} {...others}>\\n      <div className={classes.flag}>\\n        <OptionFlag />\\n      </div>\\n      <div className={classes.label}>{country?.label}</div>\\n      <CloseButton\\n        onMouseDown={onRemove}\\n        variant=\\"transparent\\"\\n        color=\\"gray\\"\\n        size={22}\\n        iconSize={14}\\n        tabIndex={-1}\\n      />\\n    </div>\\n  );\\n}\\n"},{"fileName":"countries-data.tsx","language":"tsx","code":"import { rem } from \'@mantine/core\';\\n\\nconst flagProps = {\\n  xmlns: \'http://www.w3.org/2000/svg\',\\n  viewBox: \'0 0 640 480\',\\n  style: { display: \'block\', width: rem(16) },\\n};\\n\\nfunction UsFlag() {\\n  return (\\n    <svg {...flagProps}>\\n      <defs>\\n        <clipPath id=\\"us-flag\\">\\n          <path fillOpacity=\\".7\\" d=\\"M0 0h682.7v512H0z\\" />\\n        </clipPath>\\n      </defs>\\n      <g fillRule=\\"evenodd\\" clipPath=\\"url(#us-flag)\\" transform=\\"scale(.9375)\\">\\n        <g strokeWidth=\\"1pt\\">\\n          <path\\n            fill=\\"#bd3d44\\"\\n            d=\\"M0 0h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.7h972.8V197H0zm0 78.8h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.7h972.8v39.4H0zm0 78.8h972.8V512H0z\\"\\n          />\\n          <path\\n            fill=\\"#fff\\"\\n            d=\\"M0 39.4h972.8v39.4H0zm0 78.8h972.8v39.3H0zm0 78.7h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.7h972.8v39.4H0z\\"\\n          />\\n        </g>\\n        <path fill=\\"#192f5d\\" d=\\"M0 0h389.1v275.7H0z\\" />\\n        <path\\n          fill=\\"#fff\\"\\n          d=\\"M32.4 11.8L36 22.7h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H29zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9H177l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9H242l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.2-6.7h11.4zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zM64.9 39.4l3.5 10.9h11.5L70.6 57 74 67.9l-9-6.7-9.3 6.7L59 57l-9-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 10.9-9.3-6.7-9.3 6.7L124 57l-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.7-9.3 6.7 3.5-10.9-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 10.9-9.3-6.7-9.2 6.7 3.5-10.9-9.3-6.7H256zm64.9 0l3.5 10.9h11.5L330 57l3.5 10.9-9.2-6.7-9.3 6.7 3.5-10.9-9.2-6.7h11.4zM32.4 66.9L36 78h11.4l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.3-6.7H29zm64.9 0l3.5 11h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7h11.4zm64.8 0l3.6 11H177l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.3-6.7h11.5zm64.9 0l3.5 11H242l-9.3 6.7 3.6 10.9-9.3-6.8-9.3 6.8 3.6-11-9.3-6.7h11.4zm64.8 0l3.6 11h11.4l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.2-6.7h11.4zm64.9 0l3.5 11h11.5l-9.3 6.7 3.6 10.9-9.3-6.8-9.3 6.8 3.6-11-9.3-6.7h11.5zM64.9 94.5l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H256zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zM32.4 122.1L36 133h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H29zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.7-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9H177l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9H242l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.2-6.7h11.4zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zM64.9 149.7l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 10.9-9.3-6.8-9.3 6.8 3.6-11-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.3-6.7H256zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7h11.4zM32.4 177.2l3.6 11h11.4l-9.2 6.7 3.5 10.8-9.3-6.7-9.2 6.7 3.5-10.9-9.3-6.7H29zm64.9 0l3.5 11h11.5l-9.3 6.7 3.6 10.8-9.3-6.7-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 11H177l-9.2 6.7 3.5 10.8-9.3-6.7-9.2 6.7 3.5-10.9-9.3-6.7h11.5zm64.9 0l3.5 11H242l-9.3 6.7 3.6 10.8-9.3-6.7-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 11h11.4l-9.2 6.7 3.5 10.8-9.3-6.7-9.2 6.7 3.5-10.9-9.2-6.7h11.4zm64.9 0l3.5 11h11.5l-9.3 6.7 3.6 10.8-9.3-6.7-9.3 6.7 3.6-10.9-9.3-6.7h11.5zM64.9 204.8l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H256zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zM32.4 232.4l3.6 10.9h11.4l-9.2 6.7 3.5 10.9-9.3-6.7-9.2 6.7 3.5-11-9.3-6.7H29zm64.9 0l3.5 10.9h11.5L103 250l3.6 10.9-9.3-6.7-9.3 6.7 3.6-11-9.3-6.7h11.4zm64.8 0l3.6 10.9H177l-9 6.7 3.5 10.9-9.3-6.7-9.2 6.7 3.5-11-9.3-6.7h11.5zm64.9 0l3.5 10.9H242l-9.3 6.7 3.6 10.9-9.3-6.7-9.3 6.7 3.6-11-9.3-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 10.9-9.3-6.7-9.2 6.7 3.5-11-9.2-6.7h11.4zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.6 10.9-9.3-6.7-9.3 6.7 3.6-11-9.3-6.7h11.5z\\"\\n        />\\n      </g>\\n    </svg>\\n  );\\n}\\n\\nfunction GbFlag() {\\n  return (\\n    <svg {...flagProps}>\\n      <path fill=\\"#012169\\" d=\\"M0 0h640v480H0z\\" />\\n      <path\\n        fill=\\"#FFF\\"\\n        d=\\"M75 0l244 181L562 0h78v62L400 241l240 178v61h-80L320 301 81 480H0v-60l239-178L0 64V0h75z\\"\\n      />\\n      <path\\n        fill=\\"#C8102E\\"\\n        d=\\"M424 281l216 159v40L369 281h55zm-184 20l6 35L54 480H0l240-179zM640 0v3L391 191l2-44L590 0h50zM0 0l239 176h-60L0 42V0z\\"\\n      />\\n      <path fill=\\"#FFF\\" d=\\"M241 0v480h160V0H241zM0 160v160h640V160H0z\\" />\\n      <path fill=\\"#C8102E\\" d=\\"M0 193v96h640v-96H0zM273 0v480h96V0h-96z\\" />\\n    </svg>\\n  );\\n}\\n\\nfunction FiFlag() {\\n  return (\\n    <svg {...flagProps}>\\n      <path fill=\\"#fff\\" d=\\"M0 0h640v480H0z\\" />\\n      <path fill=\\"#003580\\" d=\\"M0 174.5h640v131H0z\\" />\\n      <path fill=\\"#003580\\" d=\\"M175.5 0h130.9v480h-131z\\" />\\n    </svg>\\n  );\\n}\\n\\nfunction FrFlag() {\\n  return (\\n    <svg {...flagProps}>\\n      <g fillRule=\\"evenodd\\" strokeWidth=\\"1pt\\">\\n        <path fill=\\"#fff\\" d=\\"M0 0h640v480H0z\\" />\\n        <path fill=\\"#00267f\\" d=\\"M0 0h213.3v480H0z\\" />\\n        <path fill=\\"#f31830\\" d=\\"M426.7 0H640v480H426.7z\\" />\\n      </g>\\n    </svg>\\n  );\\n}\\n\\nfunction RuFlag() {\\n  return (\\n    <svg {...flagProps} xmlns=\\"http://www.w3.org/2000/svg\\" viewBox=\\"0 0 640 480\\">\\n      <g fillRule=\\"evenodd\\" strokeWidth=\\"1pt\\">\\n        <path fill=\\"#fff\\" d=\\"M0 0h640v480H0z\\" />\\n        <path fill=\\"#0039a6\\" d=\\"M0 160h640v320H0z\\" />\\n        <path fill=\\"#d52b1e\\" d=\\"M0 320h640v160H0z\\" />\\n      </g>\\n    </svg>\\n  );\\n}\\n\\nexport const countriesData = [\\n  { label: \'United States\', value: \'US\' },\\n  { label: \'Great Britain\', value: \'GB\' },\\n  { label: \'Finland\', value: \'FI\' },\\n  { label: \'France\', value: \'FR\' },\\n  { label: \'Russia\', value: \'RU\' },\\n];\\n\\nexport const flags: Record<string, React.FC> = {\\n  US: UsFlag,\\n  GB: GbFlag,\\n  FI: FiFlag,\\n  FR: FrFlag,\\n  RU: RuFlag,\\n};\\n"}]');let oy={xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 640 480",style:{display:"block",width:(0,e(58898).h)(16)}},oj=[{label:"United States",value:"US"},{label:"Great Britain",value:"GB"},{label:"Finland",value:"FI"},{label:"France",value:"FR"},{label:"Russia",value:"RU"}],oP={US:function(){return(0,r.jsxs)("svg",{...oy,children:[(0,r.jsx)("defs",{children:(0,r.jsx)("clipPath",{id:"us-flag",children:(0,r.jsx)("path",{fillOpacity:".7",d:"M0 0h682.7v512H0z"})})}),(0,r.jsxs)("g",{fillRule:"evenodd",clipPath:"url(#us-flag)",transform:"scale(.9375)",children:[(0,r.jsxs)("g",{strokeWidth:"1pt",children:[(0,r.jsx)("path",{fill:"#bd3d44",d:"M0 0h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.7h972.8V197H0zm0 78.8h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.7h972.8v39.4H0zm0 78.8h972.8V512H0z"}),(0,r.jsx)("path",{fill:"#fff",d:"M0 39.4h972.8v39.4H0zm0 78.8h972.8v39.3H0zm0 78.7h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.8h972.8v39.4H0zm0 78.7h972.8v39.4H0z"})]}),(0,r.jsx)("path",{fill:"#192f5d",d:"M0 0h389.1v275.7H0z"}),(0,r.jsx)("path",{fill:"#fff",d:"M32.4 11.8L36 22.7h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H29zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9H177l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9H242l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.2-6.7h11.4zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zM64.9 39.4l3.5 10.9h11.5L70.6 57 74 67.9l-9-6.7-9.3 6.7L59 57l-9-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 10.9-9.3-6.7-9.3 6.7L124 57l-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.7-9.3 6.7 3.5-10.9-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 10.9-9.3-6.7-9.2 6.7 3.5-10.9-9.3-6.7H256zm64.9 0l3.5 10.9h11.5L330 57l3.5 10.9-9.2-6.7-9.3 6.7 3.5-10.9-9.2-6.7h11.4zM32.4 66.9L36 78h11.4l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.3-6.7H29zm64.9 0l3.5 11h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7h11.4zm64.8 0l3.6 11H177l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.3-6.7h11.5zm64.9 0l3.5 11H242l-9.3 6.7 3.6 10.9-9.3-6.8-9.3 6.8 3.6-11-9.3-6.7h11.4zm64.8 0l3.6 11h11.4l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.2-6.7h11.4zm64.9 0l3.5 11h11.5l-9.3 6.7 3.6 10.9-9.3-6.8-9.3 6.8 3.6-11-9.3-6.7h11.5zM64.9 94.5l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H256zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zM32.4 122.1L36 133h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H29zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.7-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9H177l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9H242l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.2-6.7h11.4zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zM64.9 149.7l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 10.9-9.3-6.8-9.3 6.8 3.6-11-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 10.9-9.3-6.8-9.2 6.8 3.5-11-9.3-6.7H256zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 10.9-9.2-6.8-9.3 6.8 3.5-11-9.2-6.7h11.4zM32.4 177.2l3.6 11h11.4l-9.2 6.7 3.5 10.8-9.3-6.7-9.2 6.7 3.5-10.9-9.3-6.7H29zm64.9 0l3.5 11h11.5l-9.3 6.7 3.6 10.8-9.3-6.7-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 11H177l-9.2 6.7 3.5 10.8-9.3-6.7-9.2 6.7 3.5-10.9-9.3-6.7h11.5zm64.9 0l3.5 11H242l-9.3 6.7 3.6 10.8-9.3-6.7-9.3 6.7 3.6-10.9-9.3-6.7h11.4zm64.8 0l3.6 11h11.4l-9.2 6.7 3.5 10.8-9.3-6.7-9.2 6.7 3.5-10.9-9.2-6.7h11.4zm64.9 0l3.5 11h11.5l-9.3 6.7 3.6 10.8-9.3-6.7-9.3 6.7 3.6-10.9-9.3-6.7h11.5zM64.9 204.8l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.3 6.7 3.6 11-9.3-6.8-9.3 6.7 3.6-10.9-9.3-6.7h11.5zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7H191zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 11-9.3-6.8-9.2 6.7 3.5-10.9-9.3-6.7H256zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.5 11-9.2-6.8-9.3 6.7 3.5-10.9-9.2-6.7h11.4zM32.4 232.4l3.6 10.9h11.4l-9.2 6.7 3.5 10.9-9.3-6.7-9.2 6.7 3.5-11-9.3-6.7H29zm64.9 0l3.5 10.9h11.5L103 250l3.6 10.9-9.3-6.7-9.3 6.7 3.6-11-9.3-6.7h11.4zm64.8 0l3.6 10.9H177l-9 6.7 3.5 10.9-9.3-6.7-9.2 6.7 3.5-11-9.3-6.7h11.5zm64.9 0l3.5 10.9H242l-9.3 6.7 3.6 10.9-9.3-6.7-9.3 6.7 3.6-11-9.3-6.7h11.4zm64.8 0l3.6 10.9h11.4l-9.2 6.7 3.5 10.9-9.3-6.7-9.2 6.7 3.5-11-9.2-6.7h11.4zm64.9 0l3.5 10.9h11.5l-9.3 6.7 3.6 10.9-9.3-6.7-9.3 6.7 3.6-11-9.3-6.7h11.5z"})]})]})},GB:function(){return(0,r.jsxs)("svg",{...oy,children:[(0,r.jsx)("path",{fill:"#012169",d:"M0 0h640v480H0z"}),(0,r.jsx)("path",{fill:"#FFF",d:"M75 0l244 181L562 0h78v62L400 241l240 178v61h-80L320 301 81 480H0v-60l239-178L0 64V0h75z"}),(0,r.jsx)("path",{fill:"#C8102E",d:"M424 281l216 159v40L369 281h55zm-184 20l6 35L54 480H0l240-179zM640 0v3L391 191l2-44L590 0h50zM0 0l239 176h-60L0 42V0z"}),(0,r.jsx)("path",{fill:"#FFF",d:"M241 0v480h160V0H241zM0 160v160h640V160H0z"}),(0,r.jsx)("path",{fill:"#C8102E",d:"M0 193v96h640v-96H0zM273 0v480h96V0h-96z"})]})},FI:function(){return(0,r.jsxs)("svg",{...oy,children:[(0,r.jsx)("path",{fill:"#fff",d:"M0 0h640v480H0z"}),(0,r.jsx)("path",{fill:"#003580",d:"M0 174.5h640v131H0z"}),(0,r.jsx)("path",{fill:"#003580",d:"M175.5 0h130.9v480h-131z"})]})},FR:function(){return(0,r.jsx)("svg",{...oy,children:(0,r.jsxs)("g",{fillRule:"evenodd",strokeWidth:"1pt",children:[(0,r.jsx)("path",{fill:"#fff",d:"M0 0h640v480H0z"}),(0,r.jsx)("path",{fill:"#00267f",d:"M0 0h213.3v480H0z"}),(0,r.jsx)("path",{fill:"#f31830",d:"M426.7 0H640v480H426.7z"})]})})},RU:function(){return(0,r.jsx)("svg",{...oy,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 640 480",children:(0,r.jsxs)("g",{fillRule:"evenodd",strokeWidth:"1pt",children:[(0,r.jsx)("path",{fill:"#fff",d:"M0 0h640v480H0z"}),(0,r.jsx)("path",{fill:"#0039a6",d:"M0 160h640v320H0z"}),(0,r.jsx)("path",{fill:"#d52b1e",d:"M0 320h640v160H0z"})]})})}};var oB=e(20480),ok=e.n(oB);function oF(o){let{value:n,onRemove:e,...t}=o,l=oP[n],i=oj.find(o=>o.value===n);return(0,r.jsxs)("div",{className:ok().pill,...t,children:[(0,r.jsx)("div",{className:ok().flag,children:(0,r.jsx)(l,{})}),(0,r.jsx)("div",{className:ok().label,children:null==i?void 0:i.label}),(0,r.jsx)(C.P,{onMouseDown:e,variant:"transparent",color:"gray",size:22,iconSize:14,tabIndex:-1})]})}var oE=JSON.parse("[{\"fileName\":\"SearchableMultiSelect.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CheckIcon, Combobox, Group, Pill, PillsInput, useCombobox } from '@mantine/core';\\n\\nconst groceries = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83C\uDF6B Chocolate'];\\n\\nexport function SearchableMultiSelect() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => combobox.updateSelectedOptionIndex('active'),\\n  });\\n\\n  const [search, setSearch] = useState('');\\n  const [value, setValue] = useState<string[]>([]);\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const handleValueRemove = (val: string) =>\\n    setValue((current) => current.filter((v) => v !== val));\\n\\n  const values = value.map((item) => (\\n    <Pill key={item} withRemoveButton onRemove={() => handleValueRemove(item)}>\\n      {item}\\n    </Pill>\\n  ));\\n\\n  const options = groceries\\n    .filter((item) => item.toLowerCase().includes(search.trim().toLowerCase()))\\n    .map((item) => (\\n      <Combobox.Option value={item} key={item} active={value.includes(item)}>\\n        <Group gap=\\\"sm\\\">\\n          {value.includes(item) ? <CheckIcon size={12} /> : null}\\n          <span>{item}</span>\\n        </Group>\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect} withinPortal={false}>\\n      <Combobox.DropdownTarget>\\n        <PillsInput onClick={() => combobox.openDropdown()}>\\n          <Pill.Group>\\n            {values}\\n\\n            <Combobox.EventsTarget>\\n              <PillsInput.Field\\n                onFocus={() => combobox.openDropdown()}\\n                onBlur={() => combobox.closeDropdown()}\\n                value={search}\\n                placeholder=\\\"Search values\\\"\\n                onChange={(event) => {\\n                  combobox.updateSelectedOptionIndex();\\n                  setSearch(event.currentTarget.value);\\n                }}\\n                onKeyDown={(event) => {\\n                  if (event.key === 'Backspace' && search.length === 0) {\\n                    event.preventDefault();\\n                    handleValueRemove(value[value.length - 1]);\\n                  }\\n                }}\\n              />\\n            </Combobox.EventsTarget>\\n          </Pill.Group>\\n        </PillsInput>\\n      </Combobox.DropdownTarget>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found...</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let oI=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var oT=JSON.parse("[{\"fileName\":\"SearchableSelect.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SearchableSelect() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n  const [search, setSearch] = useState('');\\n\\n  const shouldFilterOptions = groceries.every((item) => item !== search);\\n  const filteredOptions = shouldFilterOptions\\n    ? groceries.filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    : groceries;\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        setSearch(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          rightSection={<Combobox.Chevron />}\\n          value={search}\\n          onChange={(event) => {\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n            setSearch(event.currentTarget.value);\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => {\\n            combobox.closeDropdown();\\n            setSearch(value || '');\\n          }}\\n          placeholder=\\\"Search value\\\"\\n          rightSectionPointerEvents=\\\"none\\\"\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let oz=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oA=JSON.parse("[{\"fileName\":\"SelectActive.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CheckIcon, Combobox, Group, Input, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SelectActive() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: (eventSource) => {\\n      if (eventSource === 'keyboard') {\\n        combobox.selectActiveOption();\\n      } else {\\n        combobox.updateSelectedOptionIndex('active');\\n      }\\n    },\\n  });\\n\\n  const [value, setValue] = useState<string | null>('\uD83E\uDD66 Broccoli');\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item} active={item === value}>\\n      <Group gap=\\\"xs\\\">\\n        {item === value && <CheckIcon size={12} />}\\n        <span>{item}</span>\\n      </Group>\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      resetSelectionOnOptionHover\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.updateSelectedOptionIndex('active');\\n      }}\\n    >\\n      <Combobox.Target targetType=\\\"button\\\">\\n        <InputBase\\n          component=\\\"button\\\"\\n          type=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          rightSectionPointerEvents=\\\"none\\\"\\n          onClick={() => combobox.toggleDropdown()}\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let oN=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oL=JSON.parse('[{"fileName":"SelectAsync.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, Loader, useCombobox } from \'@mantine/core\';\\n\\nconst MOCKDATA = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nfunction getAsyncData() {\\n  return new Promise<string[]>((resolve) => {\\n    setTimeout(() => resolve(MOCKDATA), 2000);\\n  });\\n}\\n\\nexport function SelectAsync() {\\n  const [value, setValue] = useState<string | null>(null);\\n  const [loading, setLoading] = useState(false);\\n  const [data, setData] = useState<string[]>([]);\\n\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n    onDropdownOpen: () => {\\n      if (data.length === 0 && !loading) {\\n        setLoading(true);\\n        getAsyncData().then((response) => {\\n          setData(response);\\n          setLoading(false);\\n          combobox.resetSelectedOption();\\n        });\\n      }\\n    },\\n  });\\n\\n  const options = data.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={loading ? <Loader size={18} /> : <Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {loading ? <Combobox.Empty>Loading....</Combobox.Empty> : options}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]');let oV=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oM=JSON.parse("[{\"fileName\":\"SelectClearable.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { CloseButton, Combobox, Input, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SelectClearable() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          type=\\\"button\\\"\\n          pointer\\n          rightSection={\\n            value !== null ? (\\n              <CloseButton\\n                size=\\\"sm\\\"\\n                onMouseDown={(event) => event.preventDefault()}\\n                onClick={() => setValue(null)}\\n                aria-label=\\\"Clear value\\\"\\n              />\\n            ) : (\\n              <Combobox.Chevron />\\n            )\\n          }\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents={value === null ? 'none' : 'all'}\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let o_=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oG=JSON.parse("[{\"fileName\":\"SelectCreatable.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SelectCreatable() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [data, setData] = useState(groceries);\\n  const [value, setValue] = useState<string | null>(null);\\n  const [search, setSearch] = useState('');\\n\\n  const exactOptionMatch = data.some((item) => item === search);\\n  const filteredOptions = exactOptionMatch\\n    ? data\\n    : data.filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()));\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        if (val === '$create') {\\n          setData((current) => [...current, search]);\\n          setValue(search);\\n        } else {\\n          setValue(val);\\n          setSearch(val);\\n        }\\n\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          rightSection={<Combobox.Chevron />}\\n          value={search}\\n          onChange={(event) => {\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n            setSearch(event.currentTarget.value);\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => {\\n            combobox.closeDropdown();\\n            setSearch(value || '');\\n          }}\\n          placeholder=\\\"Search value\\\"\\n          rightSectionPointerEvents=\\\"none\\\"\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options}\\n          {!exactOptionMatch && search.trim().length > 0 && (\\n            <Combobox.Option value=\\\"$create\\\">+ Create {search}</Combobox.Option>\\n          )}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let oH=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oR=JSON.parse("[{\"fileName\":\"SelectDropdownSearch.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, Input, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  '\uD83C\uDF4E Apples',\\n  '\uD83C\uDF4C Bananas',\\n  '\uD83E\uDD66 Broccoli',\\n  '\uD83E\uDD55 Carrots',\\n  '\uD83C\uDF6B Chocolate',\\n  '\uD83C\uDF47 Grapes',\\n];\\n\\nexport function SelectDropdownSearch() {\\n  const [search, setSearch] = useState('');\\n  const combobox = useCombobox({\\n    onDropdownClose: () => {\\n      combobox.resetSelectedOption();\\n      combobox.focusTarget();\\n      setSearch('');\\n    },\\n\\n    onDropdownOpen: () => {\\n      combobox.focusSearchInput();\\n    },\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries\\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    .map((item) => (\\n      <Combobox.Option value={item} key={item}>\\n        {item}\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          type=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\\"none\\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Search\\n          value={search}\\n          onChange={(event) => setSearch(event.currentTarget.value)}\\n          placeholder=\\\"Search groceries\\\"\\n        />\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let oK=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oJ=JSON.parse('[{"fileName":"SelectedAnimation.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\nimport classes from \'./SelectedAnimation.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function SelectedAnimation() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item} key={item} className={classes.option}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"SelectedAnimation.module.css","language":"css","code":".option {\\n  transition:\\n    transform 100ms ease,\\n    box-shadow 100ms ease;\\n\\n  &[data-combobox-selected] {\\n    font-weight: 500;\\n    transform: scale(1.1);\\n    box-shadow: var(--mantine-shadow-lg);\\n  }\\n}\\n"}]'),oZ=e(30651),oU=e.n(oZ);let oY=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oq=JSON.parse('[{"fileName":"SelectedStyles.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\nimport classes from \'./SelectedStyles.module.css\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function SelectedStyles() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item, index) => (\\n    <Combobox.Option\\n      value={item}\\n      key={item}\\n      className={classes.option}\\n      onMouseOver={() => combobox.selectOption(index)}\\n    >\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown onMouseLeave={() => combobox.resetSelectedOption()}>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"SelectedStyles.module.css","language":"css","code":".option {\\n  &[data-combobox-selected] {\\n    background-color: var(--mantine-color-red-9);\\n    color: var(--mantine-color-red-0);\\n    font-weight: 500;\\n  }\\n}\\n"}]'),oX=e(6552),o$=e.n(oX);let oQ=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var oW=JSON.parse('[{"fileName":"SelectGroups.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\n\\nexport function SelectGroups() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <Combobox.Group label=\\"Fruits\\">\\n            <Combobox.Option value=\\"\uD83C\uDF4E Apples\\">\uD83C\uDF4E Apples</Combobox.Option>\\n            <Combobox.Option value=\\"\uD83C\uDF4C Bananas\\">\uD83C\uDF4C Bananas</Combobox.Option>\\n            <Combobox.Option value=\\"\uD83C\uDF47 Grapes\\">\uD83C\uDF47 Grapes</Combobox.Option>\\n          </Combobox.Group>\\n\\n          <Combobox.Group label=\\"Vegetables\\">\\n            <Combobox.Option value=\\"\uD83E\uDD66 Broccoli\\">\uD83E\uDD66 Broccoli</Combobox.Option>\\n            <Combobox.Option value=\\"\uD83E\uDD55 Carrots\\">\uD83E\uDD55 Carrots</Combobox.Option>\\n          </Combobox.Group>\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]'),o0=JSON.parse("[{\"fileName\":\"SelectGroupsSearchable.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, InputBase, useCombobox } from '@mantine/core';\\n\\nconst groceries = [\\n  { label: 'Fruits', options: ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83C\uDF47 Grapes'] },\\n  { label: 'Vegetables', options: ['\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots'] },\\n];\\n\\nconst allGroceries = groceries.reduce<string[]>((acc, group) => [...acc, ...group.options], []);\\n\\nexport function SelectGroupsSearchable() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n  const [search, setSearch] = useState('');\\n\\n  const shouldFilterOptions = allGroceries.every((item) => item !== search);\\n  const filteredGroups = groceries.map((group) => {\\n    const filteredOptions = shouldFilterOptions\\n      ? group.options.filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n      : group.options;\\n\\n    return { ...group, options: filteredOptions };\\n  });\\n\\n  const totalOptions = filteredGroups.reduce((acc, group) => acc + group.options.length, 0);\\n\\n  const groups = filteredGroups.map((group) => {\\n    const options = group.options.map((item) => (\\n      <Combobox.Option value={item} key={item}>\\n        {item}\\n      </Combobox.Option>\\n    ));\\n\\n    return (\\n      <Combobox.Group label={group.label} key={group.label}>\\n        {options}\\n      </Combobox.Group>\\n    );\\n  });\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        setSearch(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          rightSection={<Combobox.Chevron />}\\n          value={search}\\n          onChange={(event) => {\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n            setSearch(event.currentTarget.value);\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => {\\n            combobox.closeDropdown();\\n            setSearch(value || '');\\n          }}\\n          placeholder=\\\"Search value\\\"\\n          rightSectionPointerEvents=\\\"none\\\"\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {totalOptions > 0 ? groups : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let o3=[{label:"Fruits",options:["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83C\uDF47 Grapes"]},{label:"Vegetables",options:["\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots"]}],o1=o3.reduce((o,n)=>[...o,...n.options],[]);var o6=JSON.parse('[{"fileName":"SelectGroupsStyles.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\nimport classes from \'./SelectGroupsStyles.module.css\';\\n\\nexport function SelectGroupsStyles() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  return (\\n    <Combobox\\n      classNames={classes}\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          <Combobox.Group label=\\"Fruits\\">\\n            <Combobox.Option value=\\"\uD83C\uDF4E Apples\\">\uD83C\uDF4E Apples</Combobox.Option>\\n            <Combobox.Option value=\\"\uD83C\uDF4C Bananas\\">\uD83C\uDF4C Bananas</Combobox.Option>\\n          </Combobox.Group>\\n\\n          <Combobox.Group label=\\"Vegetables\\">\\n            <Combobox.Option value=\\"\uD83E\uDD66 Broccoli\\">\uD83E\uDD66 Broccoli</Combobox.Option>\\n            <Combobox.Option value=\\"\uD83E\uDD55 Carrots\\">\uD83E\uDD55 Carrots</Combobox.Option>\\n          </Combobox.Group>\\n\\n          <Combobox.Option value=\\"\uD83E\uDD69 Steak\\">\uD83E\uDD69 Steak</Combobox.Option>\\n          <Combobox.Option value=\\"\uD83C\uDF57 Chicken\\">\uD83C\uDF57 Chicken</Combobox.Option>\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"SelectGroupsStyles.module.css","language":"css","code":".group {\\n  background-color: light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));\\n  border-radius: var(--mantine-radius-sm);\\n  margin-bottom: var(--mantine-spacing-xs);\\n}\\n\\n.groupLabel {\\n  color: light-dark(var(--mantine-color-black), var(--mantine-color-white));\\n\\n  &::after {\\n    display: none;\\n  }\\n}\\n"}]'),o9=e(91727),o8=e.n(o9),o5=JSON.parse('[{"fileName":"SelectLimit.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, InputBase, useCombobox } from \'@mantine/core\';\\n\\nconst MOCKDATA = Array(100000)\\n  .fill(0)\\n  .map((_, index) => `Item ${index}`);\\n\\nfunction getFilteredOptions(data: string[], searchQuery: string, limit: number) {\\n  const result: string[] = [];\\n\\n  for (let i = 0; i < data.length; i += 1) {\\n    if (result.length === limit) {\\n      break;\\n    }\\n\\n    if (data[i].toLowerCase().includes(searchQuery.trim().toLowerCase())) {\\n      result.push(data[i]);\\n    }\\n  }\\n\\n  return result;\\n}\\n\\nexport function SelectLimit() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n  const [search, setSearch] = useState(\'\');\\n\\n  const filteredOptions = getFilteredOptions(MOCKDATA, search, 7);\\n\\n  const options = filteredOptions.map((item) => (\\n    <Combobox.Option value={item} key={item}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        setSearch(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          rightSection={<Combobox.Chevron />}\\n          value={search}\\n          onChange={(event) => {\\n            combobox.openDropdown();\\n            combobox.updateSelectedOptionIndex();\\n            setSearch(event.currentTarget.value);\\n          }}\\n          onClick={() => combobox.openDropdown()}\\n          onFocus={() => combobox.openDropdown()}\\n          onBlur={() => {\\n            combobox.closeDropdown();\\n            setSearch(value || \'\');\\n          }}\\n          placeholder=\\"Search value\\"\\n          rightSectionPointerEvents=\\"none\\"\\n        />\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found</Combobox.Empty>}\\n        </Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]');let o7=Array(1e5).fill(0).map((o,n)=>"Item ".concat(n));var o4=JSON.parse('[{"fileName":"SelectList.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Checkbox, Combobox, Group, TextInput, useCombobox } from \'@mantine/core\';\\nimport classes from \'./SelectList.module.css\';\\n\\nconst groceries = [\'\uD83C\uDF4E Apples\', \'\uD83C\uDF4C Bananas\', \'\uD83E\uDD66 Broccoli\', \'\uD83E\uDD55 Carrots\', \'\uD83C\uDF6B Chocolate\'];\\n\\nexport function SelectList() {\\n  const combobox = useCombobox();\\n\\n  const [value, setValue] = useState<string[]>([]);\\n  const [search, setSearch] = useState(\'\');\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const options = groceries\\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    .map((item) => (\\n      <Combobox.Option\\n        value={item}\\n        key={item}\\n        active={value.includes(item)}\\n        onMouseOver={() => combobox.resetSelectedOption()}\\n      >\\n        <Group gap=\\"sm\\">\\n          <Checkbox\\n            checked={value.includes(item)}\\n            onChange={() => {}}\\n            aria-hidden\\n            tabIndex={-1}\\n            style={{ pointerEvents: \'none\' }}\\n          />\\n          <span>{item}</span>\\n        </Group>\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <Combobox store={combobox} onOptionSubmit={handleValueSelect}>\\n      <Combobox.EventsTarget>\\n        <TextInput\\n          placeholder=\\"Search groceries\\"\\n          classNames={{ input: classes.input }}\\n          value={search}\\n          onChange={(event) => {\\n            setSearch(event.currentTarget.value);\\n            combobox.updateSelectedOptionIndex();\\n          }}\\n        />\\n      </Combobox.EventsTarget>\\n\\n      <div className={classes.list}>\\n        <Combobox.Options>\\n          {options.length > 0 ? options : <Combobox.Empty>Nothing found....</Combobox.Empty>}\\n        </Combobox.Options>\\n      </div>\\n    </Combobox>\\n  );\\n}\\n"},{"fileName":"SelectList.module.css","language":"css","code":".list {\\n  background-color: var(--mantine-color-body);\\n  padding: var(--mantine-spacing-xs) rem(6px);\\n  border: rem(1px) solid light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-4));\\n  border-top: 0;\\n  border-bottom-left-radius: var(--mantine-radius-md);\\n  border-bottom-right-radius: var(--mantine-radius-md);\\n  min-height: rem(190px);\\n}\\n\\n.input {\\n  border-bottom-left-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n"}]'),o2=e(30434),no=e.n(o2);let nn=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate"];var ne=JSON.parse("[{\"fileName\":\"SelectOptionComponent.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { Combobox, Group, Input, InputBase, Text, useCombobox } from '@mantine/core';\\n\\ninterface Item {\\n  emoji: string;\\n  value: string;\\n  description: string;\\n}\\n\\nconst groceries: Item[] = [\\n  { emoji: '\uD83C\uDF4E', value: 'Apples', description: 'Crisp and refreshing fruit' },\\n  { emoji: '\uD83C\uDF4C', value: 'Bananas', description: 'Naturally sweet and potassium-rich fruit' },\\n  { emoji: '\uD83E\uDD66', value: 'Broccoli', description: 'Nutrient-packed green vegetable' },\\n  { emoji: '\uD83E\uDD55', value: 'Carrots', description: 'Crunchy and vitamin-rich root vegetable' },\\n  { emoji: '\uD83C\uDF6B', value: 'Chocolate', description: 'Indulgent and decadent treat' },\\n];\\n\\nfunction SelectOption({ emoji, value, description }: Item) {\\n  return (\\n    <Group>\\n      <Text fz={20}>{emoji}</Text>\\n      <div>\\n        <Text fz=\\\"sm\\\" fw={500}>\\n          {value}\\n        </Text>\\n        <Text fz=\\\"xs\\\" opacity={0.6}>\\n          {description}\\n        </Text>\\n      </div>\\n    </Group>\\n  );\\n}\\n\\nexport function SelectOptionComponent() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n  const selectedOption = groceries.find((item) => item.value === value);\\n\\n  const options = groceries.map((item) => (\\n    <Combobox.Option value={item.value} key={item.value}>\\n      <SelectOption {...item} />\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\\"button\\\"\\n          type=\\\"button\\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\\"none\\\"\\n          multiline\\n        >\\n          {selectedOption ? (\\n            <SelectOption {...selectedOption} />\\n          ) : (\\n            <Input.Placeholder>Pick value</Input.Placeholder>\\n          )}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n\"}]");let nt=[{emoji:"\uD83C\uDF4E",value:"Apples",description:"Crisp and refreshing fruit"},{emoji:"\uD83C\uDF4C",value:"Bananas",description:"Naturally sweet and potassium-rich fruit"},{emoji:"\uD83E\uDD66",value:"Broccoli",description:"Nutrient-packed green vegetable"},{emoji:"\uD83E\uDD55",value:"Carrots",description:"Crunchy and vitamin-rich root vegetable"},{emoji:"\uD83C\uDF6B",value:"Chocolate",description:"Indulgent and decadent treat"}];function nr(o){let{emoji:n,value:e,description:t}=o;return(0,r.jsxs)(A.Z,{children:[(0,r.jsx)(I.x,{fz:20,children:n}),(0,r.jsxs)("div",{children:[(0,r.jsx)(I.x,{fz:"sm",fw:500,children:e}),(0,r.jsx)(I.x,{fz:"xs",opacity:.6,children:t})]})]})}var nl=JSON.parse('[{"fileName":"SelectOptionOnHover.tsx","language":"tsx","code":"import { useState } from \'react\';\\nimport { Combobox, Input, InputBase, useCombobox } from \'@mantine/core\';\\n\\nconst groceries = [\\n  \'\uD83C\uDF4E Apples\',\\n  \'\uD83C\uDF4C Bananas\',\\n  \'\uD83E\uDD66 Broccoli\',\\n  \'\uD83E\uDD55 Carrots\',\\n  \'\uD83C\uDF6B Chocolate\',\\n  \'\uD83C\uDF47 Grapes\',\\n];\\n\\nexport function SelectOptionOnHover() {\\n  const combobox = useCombobox({\\n    onDropdownClose: () => combobox.resetSelectedOption(),\\n  });\\n\\n  const [value, setValue] = useState<string | null>(null);\\n\\n  const options = groceries.map((item, index) => (\\n    <Combobox.Option value={item} key={item} onMouseOver={() => combobox.selectOption(index)}>\\n      {item}\\n    </Combobox.Option>\\n  ));\\n\\n  return (\\n    <Combobox\\n      store={combobox}\\n      withinPortal={false}\\n      onOptionSubmit={(val) => {\\n        setValue(val);\\n        combobox.closeDropdown();\\n      }}\\n    >\\n      <Combobox.Target>\\n        <InputBase\\n          component=\\"button\\"\\n          type=\\"button\\"\\n          pointer\\n          rightSection={<Combobox.Chevron />}\\n          onClick={() => combobox.toggleDropdown()}\\n          rightSectionPointerEvents=\\"none\\"\\n        >\\n          {value || <Input.Placeholder>Pick value</Input.Placeholder>}\\n        </InputBase>\\n      </Combobox.Target>\\n\\n      <Combobox.Dropdown onMouseLeave={() => combobox.resetSelectedOption()}>\\n        <Combobox.Options>{options}</Combobox.Options>\\n      </Combobox.Dropdown>\\n    </Combobox>\\n  );\\n}\\n"}]');let ni=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83C\uDF6B Chocolate","\uD83C\uDF47 Grapes"];var ns=JSON.parse("[{\"fileName\":\"TransferList.tsx\",\"language\":\"tsx\",\"code\":\"import { useState } from 'react';\\nimport { IconChevronRight } from '@tabler/icons-react';\\nimport { ActionIcon, Checkbox, Combobox, Group, TextInput, useCombobox } from '@mantine/core';\\nimport classes from './TransferList.module.css';\\n\\nconst fruits = ['\uD83C\uDF4E Apples', '\uD83C\uDF4C Bananas', '\uD83C\uDF53 Strawberries'];\\n\\nconst vegetables = ['\uD83E\uDD66 Broccoli', '\uD83E\uDD55 Carrots', '\uD83E\uDD6C Lettuce'];\\n\\ninterface RenderListProps {\\n  options: string[];\\n  onTransfer: (options: string[]) => void;\\n  type: 'forward' | 'backward';\\n}\\n\\nfunction RenderList({ options, onTransfer, type }: RenderListProps) {\\n  const combobox = useCombobox();\\n  const [value, setValue] = useState<string[]>([]);\\n  const [search, setSearch] = useState('');\\n\\n  const handleValueSelect = (val: string) =>\\n    setValue((current) =>\\n      current.includes(val) ? current.filter((v) => v !== val) : [...current, val]\\n    );\\n\\n  const items = options\\n    .filter((item) => item.toLowerCase().includes(search.toLowerCase().trim()))\\n    .map((item) => (\\n      <Combobox.Option\\n        value={item}\\n        key={item}\\n        active={value.includes(item)}\\n        onMouseOver={() => combobox.resetSelectedOption()}\\n      >\\n        <Group gap=\\\"sm\\\">\\n          <Checkbox\\n            checked={value.includes(item)}\\n            onChange={() => {}}\\n            aria-hidden\\n            tabIndex={-1}\\n            style={{ pointerEvents: 'none' }}\\n          />\\n          <span>{item}</span>\\n        </Group>\\n      </Combobox.Option>\\n    ));\\n\\n  return (\\n    <div className={classes.renderList} data-type={type}>\\n      <Combobox store={combobox} onOptionSubmit={handleValueSelect}>\\n        <Combobox.EventsTarget>\\n          <Group wrap=\\\"nowrap\\\" gap={0} className={classes.controls}>\\n            <TextInput\\n              placeholder=\\\"Search groceries\\\"\\n              classNames={{ input: classes.input }}\\n              value={search}\\n              onChange={(event) => {\\n                setSearch(event.currentTarget.value);\\n                combobox.updateSelectedOptionIndex();\\n              }}\\n            />\\n            <ActionIcon\\n              radius={0}\\n              variant=\\\"default\\\"\\n              size={36}\\n              className={classes.control}\\n              onClick={() => {\\n                onTransfer(value);\\n                setValue([]);\\n              }}\\n            >\\n              <IconChevronRight className={classes.icon} />\\n            </ActionIcon>\\n          </Group>\\n        </Combobox.EventsTarget>\\n\\n        <div className={classes.list}>\\n          <Combobox.Options>\\n            {items.length > 0 ? items : <Combobox.Empty>Nothing found....</Combobox.Empty>}\\n          </Combobox.Options>\\n        </div>\\n      </Combobox>\\n    </div>\\n  );\\n}\\n\\nexport function TransferList() {\\n  const [data, setData] = useState<[string[], string[]]>([fruits, vegetables]);\\n\\n  const handleTransfer = (transferFrom: number, options: string[]) =>\\n    setData((current) => {\\n      const transferTo = transferFrom === 0 ? 1 : 0;\\n      const transferFromData = current[transferFrom].filter((item) => !options.includes(item));\\n      const transferToData = [...current[transferTo], ...options];\\n\\n      const result = [];\\n      result[transferFrom] = transferFromData;\\n      result[transferTo] = transferToData;\\n      return result as [string[], string[]];\\n    });\\n\\n  return (\\n    <div className={classes.root}>\\n      <RenderList\\n        type=\\\"forward\\\"\\n        options={data[0]}\\n        onTransfer={(options) => handleTransfer(0, options)}\\n      />\\n      <RenderList\\n        type=\\\"backward\\\"\\n        options={data[1]}\\n        onTransfer={(options) => handleTransfer(1, options)}\\n      />\\n    </div>\\n  );\\n}\\n\"},{\"fileName\":\"TransferList.module.css\",\"language\":\"css\",\"code\":\".root {\\n  display: flex;\\n  gap: var(--mantine-spacing-md);\\n\\n  @media (max-width: em(755px)) {\\n    flex-direction: column;\\n  }\\n}\\n\\n.controls {\\n  [data-type='backward'] & {\\n    flex-direction: row-reverse;\\n  }\\n}\\n\\n.list {\\n  background-color: var(--mantine-color-body);\\n  padding: var(--mantine-spacing-xs) rem(6px);\\n  border: rem(1px) solid light-dark(var(--mantine-color-gray-4), var(--mantine-color-dark-4));\\n  border-top: 0;\\n  border-bottom-left-radius: var(--mantine-radius-md);\\n  border-bottom-right-radius: var(--mantine-radius-md);\\n  min-height: rem(224px);\\n}\\n\\n.input {\\n  border-bottom-left-radius: 0;\\n  border-bottom-right-radius: 0;\\n\\n  [data-type='backward'] & {\\n    border-left: 0;\\n    border-top-left-radius: 0;\\n  }\\n\\n  [data-type='forward'] & {\\n    border-right: 0;\\n    border-top-right-radius: 0;\\n  }\\n}\\n\\n.control {\\n  color: light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-1));\\n\\n  [data-type='backward'] & {\\n    border-top-left-radius: var(--mantine-radius-sm);\\n  }\\n\\n  [data-type='forward'] & {\\n    border-top-right-radius: var(--mantine-radius-sm);\\n  }\\n}\\n\\n.icon {\\n  width: rem(18px);\\n  height: rem(18px);\\n\\n  [data-type='backward'] & {\\n    transform: rotate(180deg);\\n  }\\n}\\n\"}]"),na=e(44101),nc=e(15981),nu=e(98767),np=e.n(nu);let nm=["\uD83C\uDF4E Apples","\uD83C\uDF4C Bananas","\uD83C\uDF53 Strawberries"],nd=["\uD83E\uDD66 Broccoli","\uD83E\uDD55 Carrots","\uD83E\uDD6C Lettuce"];function nb(o){let{options:n,onTransfer:e,type:t}=o,s=(0,i.K)(),[c,u]=(0,l.useState)([]),[p,m]=(0,l.useState)(""),b=n.filter(o=>o.toLowerCase().includes(p.toLowerCase().trim())).map(o=>(0,r.jsx)(a.h.Option,{value:o,active:c.includes(o),onMouseOver:()=>s.resetSelectedOption(),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[(0,r.jsx)(og.X,{checked:c.includes(o),onChange:()=>{},"aria-hidden":!0,tabIndex:-1,style:{pointerEvents:"none"}}),(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsx)("div",{className:np().renderList,"data-type":t,children:(0,r.jsxs)(a.h,{store:s,onOptionSubmit:o=>u(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),children:[(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsxs)(A.Z,{wrap:"nowrap",gap:0,className:np().controls,children:[(0,r.jsx)(d.o,{placeholder:"Search groceries",classNames:{input:np().input},value:p,onChange:o=>{m(o.currentTarget.value),s.updateSelectedOptionIndex()}}),(0,r.jsx)(nc.A,{radius:0,variant:"default",size:36,className:np().control,onClick:()=>{e(c),u([])},children:(0,r.jsx)(na.Z,{className:np().icon})})]})}),(0,r.jsx)("div",{className:np().list,children:(0,r.jsx)(a.h.Options,{children:b.length>0?b:(0,r.jsx)(a.h.Empty,{children:"Nothing found...."})})})]})})}let nh={BasicSelect:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=_.map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:G},SearchableSelect:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),[t,s]=(0,l.useState)(""),c=(oz.every(o=>o!==t)?oz.filter(o=>o.toLowerCase().includes(t.toLowerCase().trim())):oz).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),s(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{rightSection:(0,r.jsx)(a.h.Chevron,{}),value:t,onChange:n=>{o.openDropdown(),o.updateSelectedOptionIndex(),s(n.currentTarget.value)},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>{o.closeDropdown(),s(n||"")},placeholder:"Search value",rightSectionPointerEvents:"none"})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:c.length>0?c:(0,r.jsx)(a.h.Empty,{children:"Nothing found"})})})]})},code:oT},BasicAutocomplete:{component:function(){let o=(0,i.K)(),[n,e]=(0,l.useState)(""),t=(B.some(o=>o===n)?B:B.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})]})},code:k},AutocompleteLimit:{component:function(){let o=(0,i.K)(),[n,e]=(0,l.useState)(""),t=(function(o,n,e){let t=[];for(let e=0;e<o.length&&7!==t.length;e+=1)o[e].toLowerCase().includes(n.trim().toLowerCase())&&t.push(o[e]);return t})(O,n,0).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},withinPortal:!1,store:o,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})]})},code:y},AsyncAutocomplete:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(!1),[t,s]=(0,l.useState)(null),[c,u]=(0,l.useState)(""),[p,m]=(0,l.useState)(!1),x=(0,l.useRef)(null),C=o=>{var n,t;null===(n=x.current)||void 0===n||n.abort(),x.current=new AbortController,e(!0),(t=x.current.signal,new Promise((n,e)=>{t.addEventListener("abort",()=>{e(Error("Request aborted"))}),setTimeout(()=>{n(h.filter(n=>n.toLowerCase().includes(o.toLowerCase())).slice(0,5))},1e3*Math.random())})).then(o=>{s(o),e(!1),m(0===o.length),x.current=void 0}).catch(()=>{})},D=(t||[]).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{u(n),o.closeDropdown()},withinPortal:!1,store:o,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Search groceries",value:c,onChange:n=>{u(n.currentTarget.value),C(n.currentTarget.value),o.resetSelectedOption(),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>{o.openDropdown(),null===t&&C(c)},onBlur:()=>o.closeDropdown(),rightSection:n&&(0,r.jsx)(b.a,{size:18})})}),(0,r.jsx)(a.h.Dropdown,{hidden:null===t,children:(0,r.jsxs)(a.h.Options,{children:[D,p&&(0,r.jsx)(a.h.Empty,{children:"No results found"})]})})]})},code:x},AutocompleteHighlight:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(""),t=(S.some(o=>o===n)?S:S.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:(0,r.jsx)(w.y,{highlight:n,size:"sm",children:o})},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},withinPortal:!1,store:o,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.updateSelectedOptionIndex(),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})]})},code:f},SelectActive:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:n=>{"keyboard"===n?o.selectActiveOption():o.updateSelectedOptionIndex("active")}}),[n,e]=(0,l.useState)("\uD83E\uDD66 Broccoli"),t=oN.map(o=>(0,r.jsx)(a.h.Option,{value:o,active:o===n,children:(0,r.jsxs)(A.Z,{gap:"xs",children:[o===n&&(0,r.jsx)(N.n,{size:12}),(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(a.h,{store:o,resetSelectionOnOptionHover:!0,withinPortal:!1,onOptionSubmit:n=>{e(n),o.updateSelectedOptionIndex("active")},children:[(0,r.jsx)(a.h.Target,{targetType:"button",children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),rightSectionPointerEvents:"none",onClick:()=>o.toggleDropdown(),children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:oA},SelectOptionComponent:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=nt.find(o=>o.value===n),s=nt.map(o=>(0,r.jsx)(a.h.Option,{value:o.value,children:(0,r.jsx)(nr,{...o})},o.value));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",multiline:!0,children:t?(0,r.jsx)(nr,{...t}):(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:s})})]})},code:ne},SelectLimit:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),[t,s]=(0,l.useState)(""),c=(function(o,n,e){let t=[];for(let e=0;e<o.length&&7!==t.length;e+=1)o[e].toLowerCase().includes(n.trim().toLowerCase())&&t.push(o[e]);return t})(o7,t,0).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),s(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{rightSection:(0,r.jsx)(a.h.Chevron,{}),value:t,onChange:n=>{o.openDropdown(),o.updateSelectedOptionIndex(),s(n.currentTarget.value)},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>{o.closeDropdown(),s(n||"")},placeholder:"Search value",rightSectionPointerEvents:"none"})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:c.length>0?c:(0,r.jsx)(a.h.Empty,{children:"Nothing found"})})})]})},code:o5},SelectAsync:{component:function(){let[o,n]=(0,l.useState)(null),[e,t]=(0,l.useState)(!1),[s,c]=(0,l.useState)([]),p=(0,i.K)({onDropdownClose:()=>p.resetSelectedOption(),onDropdownOpen:()=>{0!==s.length||e||(t(!0),new Promise(o=>{setTimeout(()=>o(oV),2e3)}).then(o=>{c(o),t(!1),p.resetSelectedOption()}))}}),m=s.map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:p,withinPortal:!1,onOptionSubmit:o=>{n(o),p.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:e?(0,r.jsx)(b.a,{size:18}):(0,r.jsx)(a.h.Chevron,{}),onClick:()=>p.toggleDropdown(),rightSectionPointerEvents:"none",children:o||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:e?(0,r.jsx)(a.h.Empty,{children:"Loading...."}):m})})]})},code:oL},AutocompleteSelectFirstOption:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(""),t=(j.some(o=>o===n)?j:j.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,l.useEffect)(()=>{o.selectFirstOption()},[n]),(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})]})},code:P},SelectClearable:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=o_.map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:null!==n?(0,r.jsx)(C.P,{size:"sm",onMouseDown:o=>o.preventDefault(),onClick:()=>e(null),"aria-label":"Clear value"}):(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:null===n?"none":"all",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:oM},DropdownScroll:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(""),t=(ou.some(o=>o===n)?ou:ou.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{mah:200,style:{overflowY:"auto"},children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})]})},code:oc},DropdownScrollArea:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(""),t=(om.some(o=>o===n)?om:om.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:(0,r.jsx)(q.x.Autosize,{mah:200,type:"scroll",children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})})]})},code:op},AutocompleteDynamic:{component:function(){let o=(0,i.K)(),[n,e]=(0,l.useState)(""),t=["gmail.com","outlook.com","mantine.dev"].map(o=>(0,r.jsx)(a.h.Option,{value:"".concat(n,"@").concat(o),children:"".concat(n,"@").concat(o)},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Your email",placeholder:"Your email",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{hidden:0===n.trim().length||n.includes("@"),children:(0,r.jsx)(a.h.Options,{children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})]})},code:g},DropdownAnimation:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=U.map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,transitionProps:{duration:200,transition:"pop"},onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:Z},DropdownPositionStyles:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=oa.map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,offset:0,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",classNames:{input:os().input},children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{className:os().dropdown,children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:ol},SelectDropdownSearch:{component:function(){let[o,n]=(0,l.useState)(""),e=(0,i.K)({onDropdownClose:()=>{e.resetSelectedOption(),e.focusTarget(),n("")},onDropdownOpen:()=>{e.focusSearchInput()}}),[t,s]=(0,l.useState)(null),c=oK.filter(n=>n.toLowerCase().includes(o.toLowerCase().trim())).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:e,withinPortal:!1,onOptionSubmit:o=>{s(o),e.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>e.toggleDropdown(),rightSectionPointerEvents:"none",children:t||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsxs)(a.h.Dropdown,{children:[(0,r.jsx)(a.h.Search,{value:o,onChange:o=>n(o.currentTarget.value),placeholder:"Search groceries"}),(0,r.jsx)(a.h.Options,{children:c.length>0?c:(0,r.jsx)(a.h.Empty,{children:"Nothing found"})})]})]})},code:oR},BasicButton:{component:function(){let[o,n]=(0,l.useState)(null),e=(0,i.K)({onDropdownClose:()=>e.resetSelectedOption()}),t=T.map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.h,{store:e,width:250,position:"bottom-start",withArrow:!0,withinPortal:!1,onOptionSubmit:o=>{n(o),e.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(F.z,{onClick:()=>e.toggleDropdown(),children:"Pick item"})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:t})})]}),(0,r.jsxs)(E.x,{mt:"xs",children:[(0,r.jsxs)(I.x,{span:!0,size:"sm",c:"dimmed",children:["Selected item:"," "]}),(0,r.jsx)(I.x,{span:!0,size:"sm",children:o||"Nothing selected"})]})]})},code:z},ButtonSearch:{component:function(){let[o,n]=(0,l.useState)(""),[e,t]=(0,l.useState)(null),s=(0,i.K)({onDropdownClose:()=>{s.resetSelectedOption(),s.focusTarget(),n("")},onDropdownOpen:()=>{s.focusSearchInput()}}),c=K.filter(n=>n.toLowerCase().includes(o.toLowerCase().trim())).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.h,{store:s,width:250,position:"bottom-start",withArrow:!0,withinPortal:!1,onOptionSubmit:o=>{t(o),s.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{withAriaAttributes:!1,children:(0,r.jsx)(F.z,{onClick:()=>s.toggleDropdown(),children:"Pick item"})}),(0,r.jsxs)(a.h.Dropdown,{children:[(0,r.jsx)(a.h.Search,{value:o,onChange:o=>n(o.currentTarget.value),placeholder:"Search groceries"}),(0,r.jsx)(a.h.Options,{children:c.length>0?c:(0,r.jsx)(a.h.Empty,{children:"Nothing found"})})]})]}),(0,r.jsxs)(E.x,{mt:"xs",children:[(0,r.jsxs)(I.x,{span:!0,size:"sm",c:"dimmed",children:["Selected item:"," "]}),(0,r.jsx)(I.x,{span:!0,size:"sm",children:e||"Nothing selected"})]})]})},code:J},DropdownOptionsAnimation:{component:function(){let[o,n]=(0,l.useState)(!1),e=(0,i.K)({onDropdownClose:()=>{e.resetSelectedOption(),n(!1)},onDropdownOpen:()=>n(!0)}),[t,s]=(0,l.useState)(null),c=or.map((n,e)=>(0,r.jsx)(a.h.Option,{value:n,className:(0,on.Z)({[ot().animateOption]:o}),style:{animationDelay:"".concat(30*e,"ms")},children:n},n));return(0,r.jsxs)(a.h,{store:e,withinPortal:!1,onOptionSubmit:o=>{s(o),e.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>e.toggleDropdown(),rightSectionPointerEvents:"none",children:t||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:c})})]})},code:oo},SelectOptionOnHover:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=ni.map((n,e)=>(0,r.jsx)(a.h.Option,{value:n,onMouseOver:()=>o.selectOption(e),children:n},n));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{onMouseLeave:()=>o.resetSelectedOption(),children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:nl},SelectedStyles:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=oQ.map((n,e)=>(0,r.jsx)(a.h.Option,{value:n,className:o$().option,onMouseOver:()=>o.selectOption(e),children:n},n));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{onMouseLeave:()=>o.resetSelectedOption(),children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:oq},DropdownFooter:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(""),t=($.some(o=>o===n)?$:$.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsxs)(a.h.Dropdown,{children:[(0,r.jsx)(a.h.Options,{children:(0,r.jsx)(q.x.Autosize,{mah:200,type:"scroll",children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})}),(0,r.jsx)(a.h.Footer,{children:(0,r.jsxs)(I.x,{fz:"xs",c:"dimmed",children:["Search powered by"," ",(0,r.jsx)(X.e,{fz:"xs",href:"https://mantine.dev",target:"_blank",children:"Mantine"})]})})]})]})},code:Y},DropdownHeader:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(""),t=(W.some(o=>o===n)?W:W.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,disabled:"\uD83E\uDD55 Carrots"===o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsxs)(a.h.Options,{children:[(0,r.jsx)(a.h.Header,{children:(0,r.jsx)(I.x,{fz:"xs",children:"Note: Carrots are not currently available"})}),(0,r.jsx)(q.x.Autosize,{mah:200,type:"scroll",children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})]})})]})},code:Q},SelectedAnimation:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),t=oY.map(o=>(0,r.jsx)(a.h.Option,{value:o,className:oU().option,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:t})})]})},code:oJ},AutocompleteClearable:{component:function(){let o=(0,i.K)(),[n,e]=(0,l.useState)(""),t=(D.some(o=>o===n)?D:D.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown(),rightSection:""!==n&&(0,r.jsx)(C.P,{size:"sm",onMouseDown:o=>o.preventDefault(),onClick:()=>e(""),"aria-label":"Clear value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})]})},code:v},BasicMultiSelect:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)([]),t=o=>e(n=>n.filter(n=>n!==o)),p=n.map(o=>(0,r.jsx)(s.D,{withRemoveButton:!0,onRemove:()=>t(o),children:o},o)),m=L.map(o=>(0,r.jsx)(a.h.Option,{value:o,active:n.includes(o),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[n.includes(o)?(0,r.jsx)(N.n,{size:12}):null,(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>e(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{pointer:!0,onClick:()=>o.toggleDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[p.length>0?p:(0,r.jsx)(u.I.Placeholder,{children:"Pick one or more values"}),(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{type:"hidden",onBlur:()=>o.closeDropdown(),onKeyDown:o=>{"Backspace"===o.key&&(o.preventDefault(),t(n[n.length-1]))}})})]})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:m})})]})},code:V},SearchableMultiSelect:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)(""),[t,u]=(0,l.useState)([]),p=o=>u(n=>n.filter(n=>n!==o)),m=t.map(o=>(0,r.jsx)(s.D,{withRemoveButton:!0,onRemove:()=>p(o),children:o},o)),d=oI.filter(o=>o.toLowerCase().includes(n.trim().toLowerCase())).map(o=>(0,r.jsx)(a.h.Option,{value:o,active:t.includes(o),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[t.includes(o)?(0,r.jsx)(N.n,{size:12}):null,(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>u(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{onClick:()=>o.openDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[m,(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown(),value:n,placeholder:"Search values",onChange:n=>{o.updateSelectedOptionIndex(),e(n.currentTarget.value)},onKeyDown:o=>{"Backspace"===o.key&&0===n.length&&(o.preventDefault(),p(t[t.length-1]))}})})]})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:d.length>0?d:(0,r.jsx)(a.h.Empty,{children:"Nothing found..."})})})]})},code:oE},DropdownSmoothScroll:{component:function(){let o=(0,i.K)({scrollBehavior:"smooth",onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(""),t=(ob.some(o=>o===n)?ob:ob.filter(o=>o.toLowerCase().includes(n.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{onOptionSubmit:n=>{e(n),o.closeDropdown()},store:o,withinPortal:!1,children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(d.o,{label:"Pick value or type anything",placeholder:"Pick value or type anything",value:n,onChange:n=>{e(n.currentTarget.value),o.openDropdown(),o.updateSelectedOptionIndex()},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown()})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:(0,r.jsx)(q.x.Autosize,{mah:200,type:"scroll",children:0===t.length?(0,r.jsx)(a.h.Empty,{children:"Nothing found"}):t})})})]})},code:od},ButtonMultiSelect:{component:function(){let[o,n]=(0,l.useState)([]),e=(0,i.K)({onDropdownClose:()=>e.resetSelectedOption()}),t=H.map(n=>(0,r.jsx)(a.h.Option,{value:n,children:(0,r.jsxs)(A.Z,{children:[o.includes(n)&&(0,r.jsx)(N.n,{size:12}),(0,r.jsx)("span",{children:n})]})},n));return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(E.x,{mb:"xs",children:[(0,r.jsxs)(I.x,{span:!0,size:"sm",c:"dimmed",children:["Selected item:"," "]}),(0,r.jsx)(I.x,{span:!0,size:"sm",children:o.length>0?o.join(", "):"Nothing selected"})]}),(0,r.jsxs)(a.h,{store:e,width:250,position:"bottom-start",withArrow:!0,withinPortal:!1,positionDependencies:[o],onOptionSubmit:o=>{n(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o])},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(F.z,{onClick:()=>e.toggleDropdown(),children:"Pick item"})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:t})})]})]})},code:R},MaxSelectedItems:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)([]),t=o=>e(n=>n.filter(n=>n!==o)),p=n.map(o=>(0,r.jsx)(s.D,{withRemoveButton:!0,onRemove:()=>t(o),children:o},o)),m=oD.map(o=>(0,r.jsx)(a.h.Option,{value:o,active:n.includes(o),disabled:n.length>=2&&!n.includes(o),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[n.includes(o)?(0,r.jsx)(N.n,{size:12}):null,(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>e(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{pointer:!0,onClick:()=>o.toggleDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[p.length>0?p:(0,r.jsx)(u.I.Placeholder,{children:"Pick one or more values"}),(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{type:"hidden",onBlur:()=>o.closeDropdown(),onKeyDown:o=>{"Backspace"===o.key&&(o.preventDefault(),t(n[n.length-1]))}})})]})})}),(0,r.jsxs)(a.h.Dropdown,{children:[(0,r.jsxs)(a.h.Header,{children:["You can select up to 2 items, currently selected: ",n.length]}),(0,r.jsx)(a.h.Options,{children:m})]})]})},code:oC},MultiSelectCheckbox:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)([]),t=o=>e(n=>n.filter(n=>n!==o)),p=n.map(o=>(0,r.jsx)(s.D,{withRemoveButton:!0,onRemove:()=>t(o),children:o},o)),m=ow.map(o=>(0,r.jsx)(a.h.Option,{value:o,active:n.includes(o),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[(0,r.jsx)(og.X,{checked:n.includes(o),onChange:()=>{},"aria-hidden":!0,tabIndex:-1,style:{pointerEvents:"none"}}),(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>e(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{pointer:!0,onClick:()=>o.toggleDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[p.length>0?p:(0,r.jsx)(u.I.Placeholder,{children:"Pick one or more values"}),(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{type:"hidden",onBlur:()=>o.closeDropdown(),onKeyDown:o=>{"Backspace"===o.key&&(o.preventDefault(),t(n[n.length-1]))}})})]})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:m})})]})},code:ov},ActiveOptionsFilter:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)([]),t=o=>e(n=>n.filter(n=>n!==o)),m=n.map(o=>(0,r.jsx)(s.D,{withRemoveButton:!0,onRemove:()=>t(o),children:o},o)),d=p.filter(o=>!n.includes(o)).map(o=>(0,r.jsx)(a.h.Option,{value:o,active:n.includes(o),children:o},o));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>e(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{pointer:!0,onClick:()=>o.toggleDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[m.length>0?m:(0,r.jsx)(u.I.Placeholder,{children:"Pick one or more values"}),(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{type:"hidden",onBlur:()=>o.closeDropdown(),onKeyDown:o=>{"Backspace"===o.key&&(o.preventDefault(),t(n[n.length-1]))}})})]})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:0===d.length?(0,r.jsx)(a.h.Empty,{children:"All options selected"}):d})})]})},code:m},MaxDisplayedItems:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)([]),t=o=>e(n=>n.filter(n=>n!==o)),p=n.slice(0,2===n.length?2:1).map(o=>(0,r.jsx)(s.D,{withRemoveButton:!0,onRemove:()=>t(o),children:o},o)),m=ox.map(o=>(0,r.jsx)(a.h.Option,{value:o,active:n.includes(o),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[n.includes(o)?(0,r.jsx)(N.n,{size:12}):null,(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>e(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{pointer:!0,onClick:()=>o.toggleDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[n.length>0?(0,r.jsxs)(r.Fragment,{children:[p,n.length>2&&(0,r.jsxs)(s.D,{children:["+",n.length-1," more"]})]}):(0,r.jsx)(u.I.Placeholder,{children:"Pick one or more values"}),(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{type:"hidden",onBlur:()=>o.closeDropdown(),onKeyDown:o=>{"Backspace"===o.key&&(o.preventDefault(),t(n[n.length-1]))}})})]})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:m})})]})},code:oh},MultiSelectValueRenderer:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)([]),t=o=>e(n=>n.filter(n=>n!==o)),p=n.map(o=>(0,r.jsx)(oF,{value:o,onRemove:()=>t(o),children:o},o)),m=oj.map(o=>{let e=oP[o.value];return(0,r.jsx)(a.h.Option,{value:o.value,active:n.includes(o.value),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[n.includes(o.value)?(0,r.jsx)(N.n,{size:12}):null,(0,r.jsxs)(A.Z,{gap:7,children:[(0,r.jsx)(e,{}),(0,r.jsx)("span",{children:o.label})]})]})},o.value)});return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>e(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{pointer:!0,onClick:()=>o.toggleDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[p.length>0?p:(0,r.jsx)(u.I.Placeholder,{children:"Pick one or more values"}),(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{type:"hidden",onBlur:()=>o.closeDropdown(),onKeyDown:o=>{"Backspace"===o.key&&(o.preventDefault(),t(n[n.length-1]))}})})]})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:m})})]})},code:oO},SelectGroups:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null);return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsxs)(a.h.Options,{children:[(0,r.jsxs)(a.h.Group,{label:"Fruits",children:[(0,r.jsx)(a.h.Option,{value:"\uD83C\uDF4E Apples",children:"\uD83C\uDF4E Apples"}),(0,r.jsx)(a.h.Option,{value:"\uD83C\uDF4C Bananas",children:"\uD83C\uDF4C Bananas"}),(0,r.jsx)(a.h.Option,{value:"\uD83C\uDF47 Grapes",children:"\uD83C\uDF47 Grapes"})]}),(0,r.jsxs)(a.h.Group,{label:"Vegetables",children:[(0,r.jsx)(a.h.Option,{value:"\uD83E\uDD66 Broccoli",children:"\uD83E\uDD66 Broccoli"}),(0,r.jsx)(a.h.Option,{value:"\uD83E\uDD55 Carrots",children:"\uD83E\uDD55 Carrots"})]})]})})]})},code:oW},SelectGroupsSearchable:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null),[t,s]=(0,l.useState)(""),c=o1.every(o=>o!==t),u=o3.map(o=>{let n=c?o.options.filter(o=>o.toLowerCase().includes(t.toLowerCase().trim())):o.options;return{...o,options:n}}),p=u.reduce((o,n)=>o+n.options.length,0),m=u.map(o=>{let n=o.options.map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsx)(a.h.Group,{label:o.label,children:n},o.label)});return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),s(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{rightSection:(0,r.jsx)(a.h.Chevron,{}),value:t,onChange:n=>{o.openDropdown(),o.updateSelectedOptionIndex(),s(n.currentTarget.value)},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>{o.closeDropdown(),s(n||"")},placeholder:"Search value",rightSectionPointerEvents:"none"})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsx)(a.h.Options,{children:p>0?m:(0,r.jsx)(a.h.Empty,{children:"Nothing found"})})})]})},code:o0},SelectGroupsStyles:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(null);return(0,r.jsxs)(a.h,{classNames:o8(),store:o,withinPortal:!1,onOptionSubmit:n=>{e(n),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{component:"button",type:"button",pointer:!0,rightSection:(0,r.jsx)(a.h.Chevron,{}),onClick:()=>o.toggleDropdown(),rightSectionPointerEvents:"none",children:n||(0,r.jsx)(u.I.Placeholder,{children:"Pick value"})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsxs)(a.h.Options,{children:[(0,r.jsxs)(a.h.Group,{label:"Fruits",children:[(0,r.jsx)(a.h.Option,{value:"\uD83C\uDF4E Apples",children:"\uD83C\uDF4E Apples"}),(0,r.jsx)(a.h.Option,{value:"\uD83C\uDF4C Bananas",children:"\uD83C\uDF4C Bananas"})]}),(0,r.jsxs)(a.h.Group,{label:"Vegetables",children:[(0,r.jsx)(a.h.Option,{value:"\uD83E\uDD66 Broccoli",children:"\uD83E\uDD66 Broccoli"}),(0,r.jsx)(a.h.Option,{value:"\uD83E\uDD55 Carrots",children:"\uD83E\uDD55 Carrots"})]}),(0,r.jsx)(a.h.Option,{value:"\uD83E\uDD69 Steak",children:"\uD83E\uDD69 Steak"}),(0,r.jsx)(a.h.Option,{value:"\uD83C\uDF57 Chicken",children:"\uD83C\uDF57 Chicken"})]})})]})},code:o6},SelectCreatable:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption()}),[n,e]=(0,l.useState)(oH),[t,s]=(0,l.useState)(null),[c,u]=(0,l.useState)(""),p=n.some(o=>o===c),m=(p?n:n.filter(o=>o.toLowerCase().includes(c.toLowerCase().trim()))).map(o=>(0,r.jsx)(a.h.Option,{value:o,children:o},o));return(0,r.jsxs)(a.h,{store:o,withinPortal:!1,onOptionSubmit:n=>{"$create"===n?(e(o=>[...o,c]),s(c)):(s(n),u(n)),o.closeDropdown()},children:[(0,r.jsx)(a.h.Target,{children:(0,r.jsx)(M.M,{rightSection:(0,r.jsx)(a.h.Chevron,{}),value:c,onChange:n=>{o.openDropdown(),o.updateSelectedOptionIndex(),u(n.currentTarget.value)},onClick:()=>o.openDropdown(),onFocus:()=>o.openDropdown(),onBlur:()=>{o.closeDropdown(),u(t||"")},placeholder:"Search value",rightSectionPointerEvents:"none"})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsxs)(a.h.Options,{children:[m,!p&&c.trim().length>0&&(0,r.jsxs)(a.h.Option,{value:"$create",children:["+ Create ",c]})]})})]})},code:oG},MultiSelectCreatable:{component:function(){let o=(0,i.K)({onDropdownClose:()=>o.resetSelectedOption(),onDropdownOpen:()=>o.updateSelectedOptionIndex("active")}),[n,e]=(0,l.useState)(""),[t,u]=(0,l.useState)(of),[p,m]=(0,l.useState)([]),d=t.some(o=>o===n),b=o=>m(n=>n.filter(n=>n!==o)),h=p.map(o=>(0,r.jsx)(s.D,{withRemoveButton:!0,onRemove:()=>b(o),children:o},o)),x=t.filter(o=>o.toLowerCase().includes(n.trim().toLowerCase())).map(o=>(0,r.jsx)(a.h.Option,{value:o,active:p.includes(o),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[p.includes(o)?(0,r.jsx)(N.n,{size:12}):null,(0,r.jsx)("span",{children:o})]})},o));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>{e(""),"$create"===o?(u(o=>[...o,n]),m(o=>[...o,n])):m(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o])},withinPortal:!1,children:[(0,r.jsx)(a.h.DropdownTarget,{children:(0,r.jsx)(c.d,{onClick:()=>o.openDropdown(),children:(0,r.jsxs)(s.D.Group,{children:[h,(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(c.d.Field,{onFocus:()=>o.openDropdown(),onBlur:()=>o.closeDropdown(),value:n,placeholder:"Search values",onChange:n=>{o.updateSelectedOptionIndex(),e(n.currentTarget.value)},onKeyDown:o=>{"Backspace"===o.key&&0===n.length&&(o.preventDefault(),b(p[p.length-1]))}})})]})})}),(0,r.jsx)(a.h.Dropdown,{children:(0,r.jsxs)(a.h.Options,{children:[x,!d&&n.trim().length>0&&(0,r.jsxs)(a.h.Option,{value:"$create",children:["+ Create ",n]}),d&&n.trim().length>0&&0===x.length&&(0,r.jsx)(a.h.Empty,{children:"Nothing found"})]})})]})},code:oS},SelectList:{component:function(){let o=(0,i.K)(),[n,e]=(0,l.useState)([]),[t,s]=(0,l.useState)(""),c=nn.filter(o=>o.toLowerCase().includes(t.toLowerCase().trim())).map(e=>(0,r.jsx)(a.h.Option,{value:e,active:n.includes(e),onMouseOver:()=>o.resetSelectedOption(),children:(0,r.jsxs)(A.Z,{gap:"sm",children:[(0,r.jsx)(og.X,{checked:n.includes(e),onChange:()=>{},"aria-hidden":!0,tabIndex:-1,style:{pointerEvents:"none"}}),(0,r.jsx)("span",{children:e})]})},e));return(0,r.jsxs)(a.h,{store:o,onOptionSubmit:o=>e(n=>n.includes(o)?n.filter(n=>n!==o):[...n,o]),children:[(0,r.jsx)(a.h.EventsTarget,{children:(0,r.jsx)(d.o,{placeholder:"Search groceries",classNames:{input:no().input},value:t,onChange:n=>{s(n.currentTarget.value),o.updateSelectedOptionIndex()}})}),(0,r.jsx)("div",{className:no().list,children:(0,r.jsx)(a.h.Options,{children:c.length>0?c:(0,r.jsx)(a.h.Empty,{children:"Nothing found...."})})})]})},code:o4},TransferList:{component:function(){let[o,n]=(0,l.useState)([nm,nd]),e=(o,e)=>n(n=>{let t=0===o?1:0,r=n[o].filter(o=>!e.includes(o)),l=[...n[t],...e],i=[];return i[o]=r,i[t]=l,i});return(0,r.jsxs)("div",{className:np().root,children:[(0,r.jsx)(nb,{type:"forward",options:o[0],onTransfer:o=>e(0,o)}),(0,r.jsx)(nb,{type:"backward",options:o[1],onTransfer:o=>e(1,o)})]})},code:ns}};var nx=e(39013),nC=e(5632),nD=e(25026),nv=e(32581),ng=e(22651),nw=e(44964),nS=e(20086),nf=e.n(nS);function nO(){let o=(0,nC.useRouter)().query.e,n=nh[o],e=t.find(n=>n.id===o);return n&&e?(0,r.jsxs)("div",{className:nf().root,children:[(0,r.jsxs)("div",{className:(0,on.Z)(nf().preview,nD.Z.classNames.zeroRight),children:[(0,r.jsxs)("div",{className:nf().header,children:[(0,r.jsxs)("div",{className:nf().headerBody,children:[(0,r.jsx)(I.x,{className:nf().title,children:e.name}),(0,r.jsx)(I.x,{className:nf().description,children:e.fullDescription||e.description})]}),(0,r.jsx)(nv.C,{variant:"light",children:e.type})]}),(0,r.jsx)("div",{className:nf().inner,children:(0,r.jsx)("div",{className:nf().wrapper,children:(0,r.jsx)(n.component,{})})})]}),(0,r.jsx)("div",{className:nf().code,children:(0,r.jsx)(nw.Q,{code:n.code,getFileIcon:ng.g})})]}):null}var ny=e(89027),nj=e(56490),nP=e(27111),nB=e(78297),nk=e(39097),nF=e.n(nk),nE=e(92536),nI=e(63409),nT=e(3900),nz=e(61004),nA=e.n(nz);function nN(o){let{data:n,searchQuery:e,onClose:t}=o,i=(0,nC.useRouter)(),[s,{toggle:a,open:c}]=(0,nT.q)(!0);if((0,l.useEffect)(c,[e]),0===n.items.length)return null;let u=n.items.map(o=>(0,r.jsxs)(nF(),{href:"/combobox?e=".concat(o.id),className:nA().link,"data-navbar-link-active":i.query.e===o.id||void 0,onClick:t,children:[(0,r.jsx)(w.y,{className:nA().linkTitle,highlight:e,children:o.name}),(0,r.jsx)(w.y,{className:nA().linkDescription,highlight:e,children:o.description})]},o.id));return(0,r.jsxs)(E.x,{className:nA().group,mod:{opened:s},children:[(0,r.jsxs)(nI.k,{className:nA().header,onClick:a,children:[(0,r.jsx)(nE.Z,{className:nA().chevron,"data-collapsed":!s||void 0}),(0,r.jsx)(I.x,{className:nA().title,children:n.group.replace("-"," ")})]}),s&&u]})}var nL=e(61290),nV=e.n(nL);function nM(o){let{opened:n,onClose:e}=o,[i,s]=(0,l.useState)(""),a=(0,l.useRef)(null),c=i.toLowerCase().split(" ").filter(o=>o.trim().length>0),u=(function(o){let n={select:[],autocomplete:[],multiselect:[],dropdown:[],button:[],animations:[],other:[]};return o.forEach(o=>{n[o.type].push(o)}),[{group:"Select",items:n.select},{group:"Autocomplete",items:n.autocomplete},{group:"Multiselect",items:n.multiselect},{group:"Button",items:n.button},{group:"Dropdown",items:n.dropdown},{group:"Animations",items:n.animations},{group:"Other",items:n.other}]})(t.filter(o=>{let n=o.name.toLowerCase().split(" ").filter(o=>o.trim().length>0),e=o.description.toLowerCase().split(" ").filter(o=>o.trim().length>0);return c.every(t=>n.some(o=>o.includes(t))||e.some(o=>o.includes(t))||o.type.includes(t))})).map(o=>(0,r.jsx)(nN,{data:o,searchQuery:c,onClose:e},o.group));return(0,nB.A)([["mod + shift + k",()=>{var o;return null===(o=a.current)||void 0===o?void 0:o.focus()}]],[]),(0,l.useEffect)(()=>{setTimeout(()=>{var o;null===(o=document.querySelector("[data-navbar-link-active]"))||void 0===o||o.scrollIntoView({block:"center",behavior:"instant"})},500)},[]),(0,r.jsxs)("nav",{className:nV().navbar,"data-hidden":!n||void 0,children:[(0,r.jsx)(d.o,{placeholder:"Ctrl + Shift + K to search",classNames:{root:nV().search,input:nV().searchInput},leftSection:(0,r.jsx)(nP.Z,{className:nV().searchIcon,stroke:1.5}),radius:"md",size:"md",value:i,onChange:o=>s(o.currentTarget.value),ref:a}),(0,r.jsxs)(q.x,{className:nV().scroll,type:"scroll",scrollbarSize:6,children:[u,(0,r.jsx)(I.x,{className:nV().empty,children:"Nothing found..."})]})]})}var n_=e(74388),nG=e.n(n_);function nH(o){let{children:n}=o,[e,t]=(0,l.useState)(!1),{setDirection:i}=(0,ny.gm)();return(0,l.useEffect)(()=>{i("ltr")},[]),(0,r.jsx)("div",{className:nG().root,children:(0,r.jsxs)(nj.N,{withNavbar:!1,navbarOpened:e,onNavbarOpenedChange:t,headerControlsProps:{withDirectionToggle:!1},children:[(0,r.jsx)(nM,{opened:e,onClose:()=>t(!1)}),(0,r.jsx)("main",{className:nG().main,children:n})]})})}var nR=function(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(nx.y,{title:"Combobox examples",description:"50+ examples of using Mantine Combobox component"}),(0,r.jsx)(nH,{children:(0,r.jsx)(nO,{})})]})}},20086:function(o){o.exports={root:"ComboboxDemo_root__pgTxA",preview:"ComboboxDemo_preview__Sv20n",header:"ComboboxDemo_header__rYvJS",headerBody:"ComboboxDemo_headerBody__Y1Ete",title:"ComboboxDemo_title__NYkR1",description:"ComboboxDemo_description__BRRml",inner:"ComboboxDemo_inner__naWf_",wrapper:"ComboboxDemo_wrapper__Z6qDH",code:"ComboboxDemo_code__pUiwZ"}},61004:function(o){o.exports={group:"ComboboxLinksGroup_group__tczs_",header:"ComboboxLinksGroup_header__JyGDA",chevron:"ComboboxLinksGroup_chevron__jy4t5",title:"ComboboxLinksGroup_title__OF7Dn",link:"ComboboxLinksGroup_link__BmXlb",linkTitle:"ComboboxLinksGroup_linkTitle__WSMzs",linkDescription:"ComboboxLinksGroup_linkDescription__3S0zw"}},61290:function(o){o.exports={navbar:"ComboboxNavbar_navbar__Hu9bL",scroll:"ComboboxNavbar_scroll__2N8KB",search:"ComboboxNavbar_search__5_b_7",searchInput:"ComboboxNavbar_searchInput__YDvcV",searchIcon:"ComboboxNavbar_searchIcon__wHVp_",item:"ComboboxNavbar_item__u7Uqc",itemName:"ComboboxNavbar_itemName__xOJIj",itemDescription:"ComboboxNavbar_itemDescription__DcGoF",empty:"ComboboxNavbar_empty__QvqR0"}},74388:function(o){o.exports={root:"ComboboxShell_root__hjrCa",main:"ComboboxShell_main__H7XCi"}},55216:function(o){o.exports={animateOption:"DropdownOptionsAnimation_animateOption__7eslD","option-animation":"DropdownOptionsAnimation_option-animation__mQfMl"}},2118:function(o){o.exports={dropdown:"DropdownPositionStyles_dropdown__s4ADC",input:"DropdownPositionStyles_input__DA7PA"}},20480:function(o){o.exports={pill:"CountryPill_pill__Hq_vr",label:"CountryPill_label__MibqJ",flag:"CountryPill_flag__uGVjB"}},91727:function(o){o.exports={group:"SelectGroupsStyles_group__nFZ2V",groupLabel:"SelectGroupsStyles_groupLabel__EC6Os"}},30434:function(o){o.exports={list:"SelectList_list__Q1Hka",input:"SelectList_input__FklyC"}},30651:function(o){o.exports={option:"SelectedAnimation_option__6XCuo"}},6552:function(o){o.exports={option:"SelectedStyles_option__0LOJC"}},98767:function(o){o.exports={root:"TransferList_root__nKAz_",controls:"TransferList_controls__LqTMd",list:"TransferList_list__nLZjP",input:"TransferList_input__7GtH_",control:"TransferList_control__fF_1d",icon:"TransferList_icon__xad_Z"}},44101:function(o,n,e){"use strict";e.d(n,{Z:function(){return t}});var t=(0,e(73681).Z)("outline","chevron-right","IconChevronRight",[["path",{d:"M9 6l6 6l-6 6",key:"svg-0"}]])},32581:function(o,n,e){"use strict";e.d(n,{C:function(){return b}});var t=e(52322);e(2784);var r=e(91482),l=e(11200),i=e(13588),s=e(38483),a=e(46690),c=e(28559),u=e(33502),p={root:"m_347db0ec","root--dot":"m_fbd81e3d",label:"m_5add502a",section:"m_91fdda9b"};let m={},d=(0,l.Z)((o,{radius:n,color:e,gradient:t,variant:l,size:s,autoContrast:a})=>{let c=o.variantColorResolver({color:e||o.primaryColor,theme:o,gradient:t,variant:l||"filled",autoContrast:a});return{root:{"--badge-height":(0,r.ap)(s,"badge-height"),"--badge-padding-x":(0,r.ap)(s,"badge-padding-x"),"--badge-fz":(0,r.ap)(s,"badge-fz"),"--badge-radius":void 0===n?void 0:(0,r.H5)(n),"--badge-bg":e||l?c.background:void 0,"--badge-color":e||l?c.color:void 0,"--badge-bd":e||l?c.border:void 0,"--badge-dot-color":"dot"===l?(0,i.p)(e,o):void 0}}}),b=(0,u.b)((o,n)=>{let e=(0,s.w)("Badge",m,o),{classNames:r,className:l,style:i,styles:u,unstyled:b,vars:h,radius:x,color:C,gradient:D,leftSection:v,rightSection:g,children:w,variant:S,fullWidth:f,autoContrast:O,circle:y,mod:j,...P}=e,B=(0,a.y)({name:"Badge",props:e,classes:p,className:l,style:i,classNames:r,styles:u,unstyled:b,vars:h,varsResolver:d});return(0,t.jsxs)(c.x,{variant:S,mod:[{block:f,circle:y,"with-right-section":!!g,"with-left-section":!!v},j],...B("root",{variant:S}),ref:n,...P,children:[v&&(0,t.jsx)("span",{...B("section"),"data-position":"left",children:v}),(0,t.jsx)("span",{...B("label"),children:w}),g&&(0,t.jsx)("span",{...B("section"),"data-position":"right",children:g})]})});b.classes=p,b.displayName="@mantine/core/Badge"},45855:function(o,n,e){"use strict";e.d(n,{D:function(){return g}});var t=e(52322);e(2784);var r=e(91482),l=e(11200),i=e(38483),s=e(46690),a=e(28559),c=e(82027),u=e(2670),p=e(7450);let[m,d]=(0,e(75336).V)();var b={root:"m_7cda1cd6","root--default":"m_44da308b","root--contrast":"m_e3a01f8",label:"m_1e0e6180",remove:"m_ae386778",group:"m_1dcfd90b"};let h={},x=(0,l.Z)((o,{gap:n},{size:e})=>({group:{"--pg-gap":void 0!==n?(0,r.ap)(n):(0,r.ap)(e,"pg-gap")}})),C=(0,c.d5)((o,n)=>{let e=(0,i.w)("PillGroup",h,o),{classNames:r,className:l,style:c,styles:u,unstyled:d,vars:C,size:D,disabled:v,...g}=e,w=(0,p.D)(),S=w?.size||D||void 0,f=(0,s.y)({name:"PillGroup",classes:b,props:e,className:l,style:c,classNames:r,styles:u,unstyled:d,vars:C,varsResolver:x,stylesCtx:{size:S},rootSelector:"group"});return(0,t.jsx)(m,{value:{size:S,disabled:v},children:(0,t.jsx)(a.x,{ref:n,size:S,...f("group"),...g})})});C.classes=b,C.displayName="@mantine/core/PillGroup";let D={variant:"default"},v=(0,l.Z)((o,{radius:n},{size:e})=>({root:{"--pill-fz":(0,r.ap)(e,"pill-fz"),"--pill-height":(0,r.ap)(e,"pill-height"),"--pill-radius":void 0===n?void 0:(0,r.H5)(n)}})),g=(0,c.d5)((o,n)=>{let e=(0,i.w)("Pill",D,o),{classNames:r,className:l,style:c,styles:m,unstyled:h,vars:x,variant:C,children:g,withRemoveButton:w,onRemove:S,removeButtonProps:f,radius:O,size:y,disabled:j,mod:P,...B}=e,k=d(),F=(0,p.D)(),E=y||k?.size||void 0,I=F?.variant==="filled"?"contrast":C||"default",T=(0,s.y)({name:"Pill",classes:b,props:e,className:l,style:c,classNames:r,styles:m,unstyled:h,vars:x,varsResolver:v,stylesCtx:{size:E}});return(0,t.jsxs)(a.x,{component:"span",ref:n,variant:I,size:E,...T("root",{variant:I}),mod:[{"with-remove":w&&!j,disabled:j||k?.disabled},P],...B,children:[(0,t.jsx)("span",{...T("label"),children:g}),w&&(0,t.jsx)(u.P,{variant:"transparent",radius:O,tabIndex:-1,"aria-hidden":!0,unstyled:h,...f,...T("remove",{className:f?.className,style:f?.style}),onMouseDown:o=>{o.preventDefault(),o.stopPropagation(),f?.onMouseDown?.(o)},onClick:o=>{o.stopPropagation(),S?.(),f?.onClick?.(o)}})]})});g.classes=b,g.displayName="@mantine/core/Pill",g.Group=C},7450:function(o,n,e){"use strict";e.d(n,{D:function(){return r},H:function(){return t}}),e(2784),e(52322);let[t,r]=(0,e(75336).V)()},92258:function(o,n,e){"use strict";e.d(n,{d:function(){return C}});var t=e(52322),r=e(2784),l=e(38483),i=e(82027),s=e(73063),a=e(7450),c=e(70837),u=e(46690),p=e(28559),m=e(69349),d={field:"m_45c4369d"};let b={type:"visible"},h=(0,i.d5)((o,n)=>{let e=(0,l.w)("PillsInputField",b,o),{classNames:r,className:i,style:s,styles:h,unstyled:x,vars:C,type:D,disabled:v,id:g,pointer:w,mod:S,...f}=e,O=(0,a.D)(),y=(0,m.D)(),j=(0,u.y)({name:"PillsInputField",classes:d,props:e,className:i,style:s,classNames:r,styles:h,unstyled:x,rootSelector:"field"}),P=v||O?.disabled;return(0,t.jsx)(p.x,{component:"input",ref:(0,c.Yx)(n,O?.fieldRef),"data-type":D,disabled:P,mod:[{disabled:P,pointer:w},S],...j("field"),...f,id:y?.inputId||g,"aria-invalid":O?.hasError,"aria-describedby":y?.describedBy,type:"text",onMouseDown:o=>!w&&o.stopPropagation()})});h.classes=d,h.displayName="@mantine/core/PillsInputField";let x={},C=(0,i.d5)((o,n)=>{let{children:e,onMouseDown:i,onClick:c,size:u,disabled:p,__staticSelector:m,error:d,variant:b,...h}=(0,l.w)("PillsInput",x,o),C=(0,r.useRef)(null);return(0,t.jsx)(a.H,{value:{fieldRef:C,size:u,disabled:p,hasError:!!d,variant:b},children:(0,t.jsx)(s.M,{size:u,error:d,variant:b,component:"div",ref:n,onMouseDown:o=>{o.preventDefault(),i?.(o),C.current?.focus()},onClick:o=>{o.preventDefault(),c?.(o),C.current?.focus()},...h,multiline:!0,disabled:p,__staticSelector:m||"PillsInput",withAria:!1,children:e})})});C.displayName="@mantine/core/PillsInput",C.Field=h},3900:function(o,n,e){"use strict";e.d(n,{q:function(){return r}});var t=e(2784);function r(o=!1,n){let{onOpen:e,onClose:r}=n||{},[l,i]=(0,t.useState)(o),s=(0,t.useCallback)(()=>{i(o=>o||(e?.(),!0))},[e]),a=(0,t.useCallback)(()=>{i(o=>o?(r?.(),!1):o)},[r]),c=(0,t.useCallback)(()=>{l?a():s()},[a,s,l]);return[l,{open:s,close:a,toggle:c}]}}},function(o){o.O(0,[61324,92888,49774,40179],function(){return o(o.s=73328)}),_N_E=o.O()}]);