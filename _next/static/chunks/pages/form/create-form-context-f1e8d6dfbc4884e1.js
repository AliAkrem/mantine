(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[67605],{2693:function(n,e,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/form/create-form-context",function(){return r(2230)}])},2230:function(n,e,r){"use strict";r.r(e),r.d(e,{default:function(){return u}});var o=r(52322),t=r(45392),m=r(54078),s=r(15019);let a=(0,m.A)(s.us.createFormContext);function i(n){let e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"createFormContext"})," function creates context provider and hook to get form object from context:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"import { TextInput } from '@mantine/core';\nimport { createFormContext } from '@mantine/form';\n\n// Definition of form values is required\ninterface FormValues {\n  age: number;\n  name: string;\n}\n\n// createFormContext returns a tuple with 3 items:\n// FormProvider is a component that sets form context\n// useFormContext hook return form object that was previously set in FormProvider\n// useForm hook works the same way as useForm exported from the package but has predefined type\nconst [FormProvider, useFormContext, useForm] =\n  createFormContext<FormValues>();\n\nfunction ContextField() {\n  const form = useFormContext();\n  return (\n    <TextInput\n      label=\"Your name\"\n      key={form.key('name')}\n      {...form.getInputProps('name')}\n    />\n  );\n}\n\nexport function Context() {\n  // Create form as described in use-form documentation\n  const form = useForm({\n    mode: 'uncontrolled',\n    initialValues: {\n      age: 0,\n      name: '',\n    },\n  });\n\n  // Wrap your form with FormProvider\n  return (\n    <FormProvider form={form}>\n      <form onSubmit={form.onSubmit(() => {})}>\n        <ContextField />\n      </form>\n    </FormProvider>\n  );\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"store-context-in-separate-file",children:"Store context in separate file"}),"\n",(0,o.jsx)(e.p,{children:"Usually it is a good idea to store form context in separate file to avoid dependencies cycle:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"// form-context.ts file\nimport { createFormContext } from '@mantine/form';\n\ninterface UserFormValues {\n  age: number;\n  name: string;\n}\n\n// You can give context variables any name\nexport const [UserFormProvider, useUserFormContext, useUserForm] =\n  createFormContext<UserFormValues>();\n"})}),"\n",(0,o.jsx)(e.p,{children:"Then you can import context variables from anywhere:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"// NameInput.tsx\nimport { TextInput } from '@mantine/core';\nimport { useUserFormContext } from './form-context';\n\nexport function NameInput() {\n  const form = useUserFormContext();\n  return (\n    <TextInput\n      label=\"Name\"\n      key={form.key('name')}\n      {...form.getInputProps('name')}\n    />\n  );\n}\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:"// UserForm.tsx\nimport { NumberInput } from '@mantine/core';\nimport { UserFormProvider, useUserForm } from './form-context';\nimport { NameInput } from './NameInput';\n\nfunction UserForm() {\n  const form = useUserForm({\n    mode: 'uncontrolled',\n    initialValues: {\n      age: 0,\n      name: '',\n    },\n  });\n\n  return (\n    <UserFormProvider form={form}>\n      <form onSubmit={form.onSubmit(() => {})}>\n        <NumberInput\n          label=\"Age\"\n          key={form.key('age')}\n          {...form.getInputProps('age')}\n        />\n        <NameInput />\n      </form>\n    </UserFormProvider>\n  );\n}\n"})})]})}function u(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(a,{...n,children:(0,o.jsx)(i,{...n})})}}},function(n){n.O(0,[61177,66748,61639,92888,49774,40179],function(){return n(n.s=2693)}),_N_E=n.O()}]);